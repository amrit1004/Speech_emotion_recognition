{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "2bb0b914",
   "metadata": {
    "id": "acBn0jSXWmvJ",
    "papermill": {
     "duration": 0.010054,
     "end_time": "2024-07-03T05:06:16.216097",
     "exception": false,
     "start_time": "2024-07-03T05:06:16.206043",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Load file names"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "f899b89e",
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "execution": {
     "iopub.execute_input": "2024-07-03T05:06:16.236702Z",
     "iopub.status.busy": "2024-07-03T05:06:16.236123Z",
     "iopub.status.idle": "2024-07-03T05:06:17.059718Z",
     "shell.execute_reply": "2024-07-03T05:06:17.058819Z"
    },
    "id": "L4isFoVsWmvN",
    "papermill": {
     "duration": 0.836465,
     "end_time": "2024-07-03T05:06:17.062188",
     "exception": false,
     "start_time": "2024-07-03T05:06:16.225723",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "   Emotion                                               Path\n",
      "0        1  /kaggle/input/indian-emotion/Audio Mode Only/A...\n",
      "1        1  /kaggle/input/indian-emotion/Audio Mode Only/A...\n",
      "2        1  /kaggle/input/indian-emotion/Audio Mode Only/A...\n",
      "3        1  /kaggle/input/indian-emotion/Audio Mode Only/A...\n",
      "4        1  /kaggle/input/indian-emotion/Audio Mode Only/A...\n"
     ]
    }
   ],
   "source": [
    "import numpy as np\n",
    "import pandas as pd\n",
    "import os\n",
    "import librosa\n",
    "import librosa.display\n",
    "import IPython\n",
    "from IPython.display import Audio\n",
    "from IPython.display import Image\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "EMOTIONS = {1:'Anger', 2:'Disgust', 3:'Fear', 4:'Happy', 5:'Sad', 0:'Neutral'} # surprise je promenjen sa 8 na 0\n",
    "DATA_PATH = '/kaggle/input/indian-emotion/Audio Mode Only'\n",
    "SAMPLE_RATE = 16000\n",
    "\n",
    "data = []\n",
    "\n",
    "for emotion_id, emotion_name in EMOTIONS.items():\n",
    "    emotion_folder = os.path.join(DATA_PATH, emotion_name)\n",
    "    \n",
    "    for dirname, _, filenames in os.walk(emotion_folder):\n",
    "        for filename in filenames:\n",
    "            file_path = os.path.join(dirname, filename)\n",
    "            \n",
    "            data.append({\n",
    "                \"Emotion\": emotion_id,\n",
    "                \"Path\": file_path\n",
    "            })\n",
    "\n",
    "data = pd.DataFrame(data)\n",
    "print(data.head())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "8ddf2c0c",
   "metadata": {
    "_cell_guid": "79c7e3d0-c299-4dcb-8224-4455121ee9b0",
    "_uuid": "d629ff2d2480ee46fbb7e2d37f6b5fab8052498a",
    "execution": {
     "iopub.execute_input": "2024-07-03T05:06:17.083202Z",
     "iopub.status.busy": "2024-07-03T05:06:17.082835Z",
     "iopub.status.idle": "2024-07-03T05:06:17.091617Z",
     "shell.execute_reply": "2024-07-03T05:06:17.090817Z"
    },
    "id": "4ML1evkjWmvP",
    "papermill": {
     "duration": 0.02095,
     "end_time": "2024-07-03T05:06:17.093550",
     "exception": false,
     "start_time": "2024-07-03T05:06:17.072600",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([1, 2, 3, 4, 5, 0])"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data['Emotion'].unique()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "909ec5a7",
   "metadata": {
    "id": "CiwyLlFVWmvQ",
    "papermill": {
     "duration": 0.008877,
     "end_time": "2024-07-03T05:06:17.111802",
     "exception": false,
     "start_time": "2024-07-03T05:06:17.102925",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Number of examples per emotion"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "4597ee70",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-03T05:06:17.130994Z",
     "iopub.status.busy": "2024-07-03T05:06:17.130716Z",
     "iopub.status.idle": "2024-07-03T05:06:17.456972Z",
     "shell.execute_reply": "2024-07-03T05:06:17.456059Z"
    },
    "id": "E-lc-Gh6WmvQ",
    "papermill": {
     "duration": 0.338178,
     "end_time": "2024-07-03T05:06:17.459072",
     "exception": false,
     "start_time": "2024-07-03T05:06:17.120894",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'Number of examples')"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig = plt.figure()\n",
    "ax = fig.add_subplot(111)\n",
    "ax.bar(x=range(6), height=data['Emotion'].value_counts())\n",
    "ax.set_xticks(ticks=range(6))\n",
    "ax.set_xticklabels([EMOTIONS for i in range(6)],fontsize=10)\n",
    "ax.set_xlabel('Emotions')\n",
    "ax.set_ylabel('Number of examples')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f20c9429",
   "metadata": {
    "id": "aYePgCseWmvU",
    "papermill": {
     "duration": 0.009595,
     "end_time": "2024-07-03T05:06:17.478963",
     "exception": false,
     "start_time": "2024-07-03T05:06:17.469368",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Load the signals"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "40bc1554",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-03T05:06:17.500328Z",
     "iopub.status.busy": "2024-07-03T05:06:17.500066Z",
     "iopub.status.idle": "2024-07-03T05:06:51.012289Z",
     "shell.execute_reply": "2024-07-03T05:06:51.011162Z"
    },
    "id": "_8g9QufkWmvU",
    "papermill": {
     "duration": 33.524915,
     "end_time": "2024-07-03T05:06:51.014415",
     "exception": false,
     "start_time": "2024-07-03T05:06:17.489500",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      " Processed 33/1233 files"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/tmp/ipykernel_24/2624433725.py:4: UserWarning: PySoundFile failed. Trying audioread instead.\n",
      "  audio, sample_rate = librosa.load(file_path, duration=3, offset=0.5, sr=SAMPLE_RATE)\n",
      "/opt/conda/lib/python3.10/site-packages/librosa/core/audio.py:184: FutureWarning: librosa.core.audio.__audioread_load\n",
      "\tDeprecated as of librosa version 0.10.0.\n",
      "\tIt will be removed in librosa version 1.0.\n",
      "  y, sr_native = __audioread_load(path, offset, duration, dtype)\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      " Processed 232/1233 files"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/tmp/ipykernel_24/2624433725.py:4: UserWarning: PySoundFile failed. Trying audioread instead.\n",
      "  audio, sample_rate = librosa.load(file_path, duration=3, offset=0.5, sr=SAMPLE_RATE)\n",
      "/opt/conda/lib/python3.10/site-packages/librosa/core/audio.py:184: FutureWarning: librosa.core.audio.__audioread_load\n",
      "\tDeprecated as of librosa version 0.10.0.\n",
      "\tIt will be removed in librosa version 1.0.\n",
      "  y, sr_native = __audioread_load(path, offset, duration, dtype)\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      " Processed 1232/1233 files"
     ]
    }
   ],
   "source": [
    "mel_spectrograms = []\n",
    "signals = []\n",
    "for i, file_path in enumerate(data.Path):\n",
    "    audio, sample_rate = librosa.load(file_path, duration=3, offset=0.5, sr=SAMPLE_RATE)\n",
    "    signal = np.zeros((int(SAMPLE_RATE*3,)))\n",
    "    signal[:len(audio)] = audio\n",
    "    signals.append(signal)\n",
    "    print(\"\\r Processed {}/{} files\".format(i,len(data)),end='')\n",
    "signals = np.stack(signals,axis=0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "4779611e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-03T05:06:51.055512Z",
     "iopub.status.busy": "2024-07-03T05:06:51.055017Z",
     "iopub.status.idle": "2024-07-03T05:06:51.063936Z",
     "shell.execute_reply": "2024-07-03T05:06:51.062823Z"
    },
    "papermill": {
     "duration": 0.031711,
     "end_time": "2024-07-03T05:06:51.065903",
     "exception": false,
     "start_time": "2024-07-03T05:06:51.034192",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "emotion_ind = list(data.loc[data.Emotion==EMOTIONS,'Emotion'].index)\n",
    "emotion_ind = np.random.permutation(emotion_ind)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "d1ea7044",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-03T05:06:51.107048Z",
     "iopub.status.busy": "2024-07-03T05:06:51.106773Z",
     "iopub.status.idle": "2024-07-03T05:06:51.112087Z",
     "shell.execute_reply": "2024-07-03T05:06:51.111129Z"
    },
    "papermill": {
     "duration": 0.027969,
     "end_time": "2024-07-03T05:06:51.113967",
     "exception": false,
     "start_time": "2024-07-03T05:06:51.085998",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "emotion_ind = list(data.loc[data.Emotion==EMOTIONS,'Emotion'].index.astype(int))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "210cfafe",
   "metadata": {
    "id": "QVW1Av6BWmvV",
    "papermill": {
     "duration": 0.020836,
     "end_time": "2024-07-03T05:06:51.155015",
     "exception": false,
     "start_time": "2024-07-03T05:06:51.134179",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Split the data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "75231c24",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-03T05:06:51.196598Z",
     "iopub.status.busy": "2024-07-03T05:06:51.196315Z",
     "iopub.status.idle": "2024-07-03T05:06:51.480285Z",
     "shell.execute_reply": "2024-07-03T05:06:51.479133Z"
    },
    "id": "qXduocCHWmvV",
    "papermill": {
     "duration": 0.306911,
     "end_time": "2024-07-03T05:06:51.482634",
     "exception": false,
     "start_time": "2024-07-03T05:06:51.175723",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "X_train:(984, 48000), Y_train:(984,)\n",
      "X_val:(123, 48000), Y_val:(123,)\n",
      "X_test:(126, 48000), Y_test:(126,)\n",
      "Number of unique indexes is 1233, out of 1233\n"
     ]
    }
   ],
   "source": [
    "X = signals\n",
    "train_ind,test_ind,val_ind = [],[],[]\n",
    "X_train,X_val,X_test = [],[],[]\n",
    "Y_train,Y_val,Y_test = [],[],[]\n",
    "for emotion in range(len(EMOTIONS)):\n",
    "    emotion_ind = list(data.loc[data.Emotion==emotion,'Emotion'].index)\n",
    "    emotion_ind = np.random.permutation(emotion_ind)\n",
    "    m = len(emotion_ind)\n",
    "    ind_train = emotion_ind[:int(0.8*m)].astype(int)\n",
    "    ind_val = emotion_ind[int(0.8*m):int(0.9*m)].astype(int)\n",
    "    ind_test = emotion_ind[int(0.9*m):].astype(int)\n",
    "    X_train.append(X[ind_train,:])\n",
    "    Y_train.append(np.array([emotion]*len(ind_train),dtype=np.int32))\n",
    "    X_val.append(X[ind_val,:])\n",
    "    Y_val.append(np.array([emotion]*len(ind_val),dtype=np.int32))\n",
    "    X_test.append(X[ind_test,:])\n",
    "    Y_test.append(np.array([emotion]*len(ind_test),dtype=np.int32))\n",
    "    train_ind.append(ind_train)\n",
    "    test_ind.append(ind_test)\n",
    "    val_ind.append(ind_val)\n",
    "X_train = np.concatenate(X_train,0)\n",
    "X_val = np.concatenate(X_val,0)\n",
    "X_test = np.concatenate(X_test,0)\n",
    "Y_train = np.concatenate(Y_train,0)\n",
    "Y_val = np.concatenate(Y_val,0)\n",
    "Y_test = np.concatenate(Y_test,0)\n",
    "train_ind = np.concatenate(train_ind,0)\n",
    "val_ind = np.concatenate(val_ind,0)\n",
    "test_ind = np.concatenate(test_ind,0)\n",
    "print(f'X_train:{X_train.shape}, Y_train:{Y_train.shape}')\n",
    "print(f'X_val:{X_val.shape}, Y_val:{Y_val.shape}')\n",
    "print(f'X_test:{X_test.shape}, Y_test:{Y_test.shape}')\n",
    "# check if all are unique\n",
    "unique, count = np.unique(np.concatenate([train_ind,test_ind,val_ind],0), return_counts=True)\n",
    "print(\"Number of unique indexes is {}, out of {}\".format(sum(count==1), X.shape[0]))\n",
    "\n",
    "del X"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "563e50cf",
   "metadata": {
    "id": "KQgfbrsXWmvW",
    "papermill": {
     "duration": 0.018223,
     "end_time": "2024-07-03T05:06:51.520867",
     "exception": false,
     "start_time": "2024-07-03T05:06:51.502644",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Augment signals by adding AWGN"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "5598bd7c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-03T05:06:51.559184Z",
     "iopub.status.busy": "2024-07-03T05:06:51.558882Z",
     "iopub.status.idle": "2024-07-03T05:06:51.566222Z",
     "shell.execute_reply": "2024-07-03T05:06:51.565259Z"
    },
    "id": "RbhKUl6kWmvX",
    "papermill": {
     "duration": 0.028749,
     "end_time": "2024-07-03T05:06:51.568036",
     "exception": false,
     "start_time": "2024-07-03T05:06:51.539287",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def addAWGN(signal, num_bits=16, augmented_num=2, snr_low=15, snr_high=30): \n",
    "    signal_len = len(signal)\n",
    "    # Generate White Gaussian noise\n",
    "    noise = np.random.normal(size=(augmented_num, signal_len))\n",
    "    # Normalize signal and noise\n",
    "    norm_constant = 2.0**(num_bits-1)\n",
    "    signal_norm = signal / norm_constant\n",
    "    noise_norm = noise / norm_constant\n",
    "    # Compute signal and noise power\n",
    "    s_power = np.sum(signal_norm ** 2) / signal_len\n",
    "    n_power = np.sum(noise_norm ** 2, axis=1) / signal_len\n",
    "    # Random SNR: Uniform [15, 30] in dB\n",
    "    target_snr = np.random.randint(snr_low, snr_high)\n",
    "    # Compute K (covariance matrix) for each noise \n",
    "    K = np.sqrt((s_power / n_power) * 10 ** (- target_snr / 10))\n",
    "    K = np.ones((signal_len, augmented_num)) * K  \n",
    "    # Generate noisy signal\n",
    "    return signal + K.T * noise"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "7c3bbbf2",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-03T05:06:51.606431Z",
     "iopub.status.busy": "2024-07-03T05:06:51.605963Z",
     "iopub.status.idle": "2024-07-03T05:06:57.059967Z",
     "shell.execute_reply": "2024-07-03T05:06:57.058602Z"
    },
    "id": "X1toUPgkWmvY",
    "papermill": {
     "duration": 5.475672,
     "end_time": "2024-07-03T05:06:57.062320",
     "exception": false,
     "start_time": "2024-07-03T05:06:51.586648",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      " Processed 984/984 files\n",
      "X_train:(2952, 48000), Y_train:(2952,)\n"
     ]
    }
   ],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "\n",
    "aug_signals = []\n",
    "aug_labels = []\n",
    "for i in range(X_train.shape[0]):\n",
    "    signal = X_train[i,:]\n",
    "    augmented_signals = addAWGN(signal)\n",
    "    for j in range(augmented_signals.shape[0]):\n",
    "        aug_labels.append(data.loc[i,\"Emotion\"])\n",
    "        aug_signals.append(augmented_signals[j,:])\n",
    "        # Correct the concatenation here\n",
    "        data = pd.concat([data, data.iloc[[i]]], ignore_index=True)\n",
    "    print(\"\\r Processed {}/{} files\".format(i+1,X_train.shape[0]), end='')\n",
    "\n",
    "aug_signals = np.stack(aug_signals, axis=0)\n",
    "X_train = np.concatenate([X_train, aug_signals], axis=0)\n",
    "aug_labels = np.array(aug_labels)  # Convert to numpy array\n",
    "Y_train = np.concatenate([Y_train, aug_labels])\n",
    "\n",
    "print('')\n",
    "print(f'X_train:{X_train.shape}, Y_train:{Y_train.shape}')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "68a2edc1",
   "metadata": {
    "id": "vM2L_HIrWmvZ",
    "papermill": {
     "duration": 0.023543,
     "end_time": "2024-07-03T05:06:57.109897",
     "exception": false,
     "start_time": "2024-07-03T05:06:57.086354",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Calculate mel spectrograms"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "8383200a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-03T05:06:57.159040Z",
     "iopub.status.busy": "2024-07-03T05:06:57.158673Z",
     "iopub.status.idle": "2024-07-03T05:06:58.651445Z",
     "shell.execute_reply": "2024-07-03T05:06:58.650438Z"
    },
    "id": "SjOQZFmUWmvZ",
    "papermill": {
     "duration": 1.520394,
     "end_time": "2024-07-03T05:06:58.653644",
     "exception": false,
     "start_time": "2024-07-03T05:06:57.133250",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "MEL spectrogram shape:  (128, 188)\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "def getMELspectrogram(audio, sample_rate):\n",
    "    mel_spec = librosa.feature.melspectrogram(y=audio,\n",
    "                                              sr=sample_rate,\n",
    "                                              n_fft=1024,\n",
    "                                              win_length = 512,\n",
    "                                              window='hamming',\n",
    "                                              hop_length = 256,\n",
    "                                              n_mels=128,\n",
    "                                              fmax=sample_rate/2\n",
    "                                             )\n",
    "    mel_spec_db = librosa.power_to_db(mel_spec, ref=np.max)\n",
    "    return mel_spec_db\n",
    "\n",
    "# test function\n",
    "audio, sample_rate = librosa.load(data.loc[1,'Path'], duration=3, offset=0.5,sr=SAMPLE_RATE)\n",
    "signal = np.zeros((int(SAMPLE_RATE*3,)))\n",
    "signal[:len(audio)] = audio\n",
    "mel_spectrogram = getMELspectrogram(signal, SAMPLE_RATE)\n",
    "librosa.display.specshow(mel_spectrogram, y_axis='mel', x_axis='time')\n",
    "print('MEL spectrogram shape: ',mel_spectrogram.shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "ba262c5d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-03T05:06:58.705565Z",
     "iopub.status.busy": "2024-07-03T05:06:58.705259Z",
     "iopub.status.idle": "2024-07-03T05:07:36.313440Z",
     "shell.execute_reply": "2024-07-03T05:07:36.312192Z"
    },
    "id": "vsu9C-Z_Wmva",
    "papermill": {
     "duration": 37.637984,
     "end_time": "2024-07-03T05:07:36.317220",
     "exception": false,
     "start_time": "2024-07-03T05:06:58.679236",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Calculatin mel spectrograms for train set\n",
      " Processed 2951/2952 files\n",
      "Calculatin mel spectrograms for val set\n",
      " Processed 122/123 files\n",
      "Calculatin mel spectrograms for test set\n",
      " Processed 125/126 files\n",
      "X_train:(2952, 128, 188), Y_train:(2952,)\n",
      "X_val:(123, 128, 188), Y_val:(123,)\n",
      "X_test:(126, 128, 188), Y_test:(126,)\n"
     ]
    }
   ],
   "source": [
    "mel_train = []\n",
    "print(\"Calculatin mel spectrograms for train set\")\n",
    "for i in range(X_train.shape[0]):\n",
    "    mel_spectrogram = getMELspectrogram(X_train[i,:], sample_rate=SAMPLE_RATE)\n",
    "    mel_train.append(mel_spectrogram)\n",
    "    print(\"\\r Processed {}/{} files\".format(i,X_train.shape[0]),end='')\n",
    "print('')\n",
    "mel_train = np.stack(mel_train,axis=0)\n",
    "del X_train\n",
    "X_train = mel_train\n",
    "\n",
    "mel_val = []\n",
    "print(\"Calculatin mel spectrograms for val set\")\n",
    "for i in range(X_val.shape[0]):\n",
    "    mel_spectrogram = getMELspectrogram(X_val[i,:], sample_rate=SAMPLE_RATE)\n",
    "    mel_val.append(mel_spectrogram)\n",
    "    print(\"\\r Processed {}/{} files\".format(i,X_val.shape[0]),end='')\n",
    "print('')\n",
    "mel_val = np.stack(mel_val,axis=0)\n",
    "del X_val\n",
    "X_val = mel_val\n",
    "\n",
    "mel_test = []\n",
    "print(\"Calculatin mel spectrograms for test set\")\n",
    "for i in range(X_test.shape[0]):\n",
    "    mel_spectrogram = getMELspectrogram(X_test[i,:], sample_rate=SAMPLE_RATE)\n",
    "    mel_test.append(mel_spectrogram)\n",
    "    print(\"\\r Processed {}/{} files\".format(i,X_test.shape[0]),end='')\n",
    "print('')\n",
    "mel_test = np.stack(mel_test,axis=0)\n",
    "del X_test\n",
    "X_test = mel_test\n",
    "\n",
    "print(f'X_train:{X_train.shape}, Y_train:{Y_train.shape}')\n",
    "print(f'X_val:{X_val.shape}, Y_val:{Y_val.shape}')\n",
    "print(f'X_test:{X_test.shape}, Y_test:{Y_test.shape}')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d989f9d1",
   "metadata": {
    "id": "E71VeUp5Wmvb",
    "papermill": {
     "duration": 0.052542,
     "end_time": "2024-07-03T05:07:36.460283",
     "exception": false,
     "start_time": "2024-07-03T05:07:36.407741",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Create the model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "4647903b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-03T05:07:36.543498Z",
     "iopub.status.busy": "2024-07-03T05:07:36.542461Z",
     "iopub.status.idle": "2024-07-03T05:07:40.259542Z",
     "shell.execute_reply": "2024-07-03T05:07:40.258711Z"
    },
    "id": "Cb5FUckmWmvc",
    "papermill": {
     "duration": 3.761194,
     "end_time": "2024-07-03T05:07:40.262109",
     "exception": false,
     "start_time": "2024-07-03T05:07:36.500915",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "import torch\n",
    "import torch.nn as nn\n",
    "\n",
    "class ParallelModel(nn.Module):\n",
    "    def __init__(self, num_emotions):\n",
    "        super().__init__()\n",
    "        # conv block\n",
    "        self.conv2Dblock = nn.Sequential(\n",
    "            # 1. conv block\n",
    "            nn.Conv2d(in_channels=1, out_channels=16, kernel_size=3, stride=1, padding=1),\n",
    "            nn.BatchNorm2d(16),\n",
    "            nn.ReLU(),\n",
    "            nn.MaxPool2d(kernel_size=2, stride=2),\n",
    "            nn.Dropout(p=0.3),\n",
    "            # 2. conv block\n",
    "            nn.Conv2d(in_channels=16, out_channels=32, kernel_size=3, stride=1, padding=1),\n",
    "            nn.BatchNorm2d(32),\n",
    "            nn.ReLU(),\n",
    "            nn.MaxPool2d(kernel_size=4, stride=4),\n",
    "            nn.Dropout(p=0.3),\n",
    "            # 3. conv block\n",
    "            nn.Conv2d(in_channels=32, out_channels=64, kernel_size=3, stride=1, padding=1),\n",
    "            nn.BatchNorm2d(64),\n",
    "            nn.ReLU(),\n",
    "            nn.MaxPool2d(kernel_size=4, stride=4),\n",
    "            nn.Dropout(p=0.3),\n",
    "            # 4. conv block\n",
    "            nn.Conv2d(in_channels=64, out_channels=64, kernel_size=3, stride=1, padding=1),\n",
    "            nn.BatchNorm2d(64),\n",
    "            nn.ReLU(),\n",
    "            nn.MaxPool2d(kernel_size=4, stride=4),\n",
    "            nn.Dropout(p=0.3)\n",
    "        )\n",
    "        # LSTM block\n",
    "        self.lstm_maxpool = nn.MaxPool2d(kernel_size=[2, 4], stride=[2, 4])\n",
    "        hidden_size = 128\n",
    "        self.lstm = nn.LSTM(input_size=64, hidden_size=hidden_size, bidirectional=True, batch_first=True)\n",
    "        self.dropout_lstm = nn.Dropout(0.1)\n",
    "        self.attention_linear = nn.Linear(2 * hidden_size, 1)  # 2*hidden_size for the 2 outputs of bidir LSTM\n",
    "        # Linear softmax layer\n",
    "        self.out_linear = nn.Linear(2 * hidden_size + 64, num_emotions)\n",
    "        self.dropout_linear = nn.Dropout(p=0)\n",
    "        self.out_softmax = nn.Softmax(dim=1)\n",
    "\n",
    "    def forward(self, x):\n",
    "        # conv embedding\n",
    "        conv_embedding = self.conv2Dblock(x)  # (b, channel, freq, time)\n",
    "        conv_embedding = torch.flatten(conv_embedding, start_dim=1)  # do not flatten batch dimension\n",
    "        # lstm embedding\n",
    "        x_reduced = self.lstm_maxpool(x)\n",
    "        x_reduced = torch.squeeze(x_reduced, 1)\n",
    "        x_reduced = x_reduced.permute(0, 2, 1)  # (b, t, freq)\n",
    "        lstm_embedding, (h, c) = self.lstm(x_reduced)  # (b, time, hidden_size*2)\n",
    "        lstm_embedding = self.dropout_lstm(lstm_embedding)\n",
    "        batch_size, T, _ = lstm_embedding.shape\n",
    "        attention_weights = [None] * T\n",
    "        for t in range(T):\n",
    "            embedding = lstm_embedding[:, t, :]\n",
    "            attention_weights[t] = self.attention_linear(embedding)\n",
    "        attention_weights_norm = nn.functional.softmax(torch.stack(attention_weights, -1), -1)\n",
    "        attention = torch.bmm(attention_weights_norm, lstm_embedding)  # (Bx1xT)*(B,T,hidden_size*2)=(B,1,2*hidden_size)\n",
    "        attention = torch.squeeze(attention, 1)\n",
    "        # concatenate\n",
    "        complete_embedding = torch.cat([conv_embedding, attention], dim=1)\n",
    "\n",
    "        # Debug prints for shapes\n",
    "        #print(\"conv_embedding shape:\", conv_embedding.shape)\n",
    "        #print(\"attention shape:\", attention.shape)\n",
    "\n",
    "        output_logits = self.out_linear(complete_embedding)\n",
    "        output_logits = self.dropout_linear(output_logits)\n",
    "        output_softmax = self.out_softmax(output_logits)\n",
    "        return output_logits, output_softmax, attention_weights_norm\n",
    "\n",
    "# Test the model with a dummy input\n",
    "model = ParallelModel(num_emotions=6)\n",
    "dummy_input = torch.randn(2, 1, 128, 128)  # (batch_size, channels, freq, time)\n",
    "output_logits, output_softmax, attention_weights_norm = model(dummy_input)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "bb45443d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-03T05:07:40.343989Z",
     "iopub.status.busy": "2024-07-03T05:07:40.343281Z",
     "iopub.status.idle": "2024-07-03T05:07:40.347728Z",
     "shell.execute_reply": "2024-07-03T05:07:40.346932Z"
    },
    "id": "8w51AKkUWmvd",
    "papermill": {
     "duration": 0.047198,
     "end_time": "2024-07-03T05:07:40.349830",
     "exception": false,
     "start_time": "2024-07-03T05:07:40.302632",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def loss_fnc(predictions, targets):\n",
    "    return nn.CrossEntropyLoss()(input=predictions,target=targets)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "dd59f09b",
   "metadata": {
    "id": "10sxtTuNWmvd",
    "papermill": {
     "duration": 0.039603,
     "end_time": "2024-07-03T05:07:40.470597",
     "exception": false,
     "start_time": "2024-07-03T05:07:40.430994",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# TRAINING"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "468aa753",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-03T05:07:40.554428Z",
     "iopub.status.busy": "2024-07-03T05:07:40.553544Z",
     "iopub.status.idle": "2024-07-03T05:07:40.561897Z",
     "shell.execute_reply": "2024-07-03T05:07:40.560907Z"
    },
    "id": "EE987u5qWmvd",
    "papermill": {
     "duration": 0.053489,
     "end_time": "2024-07-03T05:07:40.564033",
     "exception": false,
     "start_time": "2024-07-03T05:07:40.510544",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def make_train_step(model, loss_fnc, optimizer):\n",
    "    def train_step(X,Y):\n",
    "        # set model to train mode\n",
    "        model.train()\n",
    "        # forward pass\n",
    "        output_logits, output_softmax, attention_weights_norm = model(X)\n",
    "        predictions = torch.argmax(output_softmax,dim=1)\n",
    "        accuracy = torch.sum(Y==predictions)/float(len(Y))\n",
    "        # compute loss\n",
    "        loss = loss_fnc(output_logits, Y)\n",
    "        # compute gradients\n",
    "        loss.backward()\n",
    "        # update parameters and zero gradients\n",
    "        optimizer.step()\n",
    "        optimizer.zero_grad()\n",
    "        return loss.item(), accuracy*100\n",
    "    return train_step"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "e76f43eb",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-03T05:07:40.649723Z",
     "iopub.status.busy": "2024-07-03T05:07:40.649432Z",
     "iopub.status.idle": "2024-07-03T05:07:40.655375Z",
     "shell.execute_reply": "2024-07-03T05:07:40.654509Z"
    },
    "id": "pP0GGToIWmve",
    "papermill": {
     "duration": 0.049453,
     "end_time": "2024-07-03T05:07:40.657339",
     "exception": false,
     "start_time": "2024-07-03T05:07:40.607886",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def make_validate_fnc(model,loss_fnc):\n",
    "    def validate(X,Y):\n",
    "        with torch.no_grad():\n",
    "            model.eval()\n",
    "            output_logits, output_softmax, attention_weights_norm = model(X)\n",
    "            predictions = torch.argmax(output_softmax,dim=1)\n",
    "            accuracy = torch.sum(Y==predictions)/float(len(Y))\n",
    "            loss = loss_fnc(output_logits,Y)\n",
    "        return loss.item(), accuracy*100, predictions\n",
    "    return validate"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "b9e917ef",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-03T05:07:40.753347Z",
     "iopub.status.busy": "2024-07-03T05:07:40.752658Z",
     "iopub.status.idle": "2024-07-03T05:07:41.739635Z",
     "shell.execute_reply": "2024-07-03T05:07:41.738819Z"
    },
    "id": "Nqy3qHcoWmve",
    "papermill": {
     "duration": 1.041649,
     "end_time": "2024-07-03T05:07:41.742322",
     "exception": false,
     "start_time": "2024-07-03T05:07:40.700673",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "from sklearn.preprocessing import StandardScaler\n",
    "\n",
    "# Assuming X_train, X_val, and X_test are your original data\n",
    "# and they have shape (batch_size, height, width)\n",
    "\n",
    "# Add channel dimension if it's not already present\n",
    "X_train = np.expand_dims(X_train, 1)\n",
    "X_val = np.expand_dims(X_val, 1)\n",
    "X_test = np.expand_dims(X_test, 1)\n",
    "\n",
    "# Now they should have shape (batch_size, channels, height, width)\n",
    "\n",
    "scaler = StandardScaler()\n",
    "\n",
    "# Reshape and scale\n",
    "b, c, h, w = X_train.shape\n",
    "X_train = np.reshape(X_train, newshape=(b, -1))\n",
    "X_train = scaler.fit_transform(X_train)\n",
    "X_train = np.reshape(X_train, newshape=(b, c, h, w))\n",
    "\n",
    "b, c, h, w = X_test.shape\n",
    "X_test = np.reshape(X_test, newshape=(b, -1))\n",
    "X_test = scaler.transform(X_test)\n",
    "X_test = np.reshape(X_test, newshape=(b, c, h, w))\n",
    "\n",
    "b, c, h, w = X_val.shape\n",
    "X_val = np.reshape(X_val, newshape=(b, -1))\n",
    "X_val = scaler.transform(X_val)\n",
    "X_val = np.reshape(X_val, newshape=(b, c, h, w))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "d4758304",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-03T05:07:41.827049Z",
     "iopub.status.busy": "2024-07-03T05:07:41.826730Z",
     "iopub.status.idle": "2024-07-03T05:07:41.831899Z",
     "shell.execute_reply": "2024-07-03T05:07:41.831017Z"
    },
    "papermill": {
     "duration": 0.049543,
     "end_time": "2024-07-03T05:07:41.833929",
     "exception": false,
     "start_time": "2024-07-03T05:07:41.784386",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "X_train shape: (2952, 1, 128, 188)\n",
      "X_val shape: (123, 1, 128, 188)\n",
      "X_test shape: (126, 1, 128, 188)\n"
     ]
    }
   ],
   "source": [
    "print(\"X_train shape:\", X_train.shape)\n",
    "print(\"X_val shape:\", X_val.shape)\n",
    "print(\"X_test shape:\", X_test.shape)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "acb0ae98",
   "metadata": {
    "id": "tDN-lRs7Wmvf",
    "papermill": {
     "duration": 0.040956,
     "end_time": "2024-07-03T05:07:41.914900",
     "exception": false,
     "start_time": "2024-07-03T05:07:41.873944",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Train the model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "3bfd5f82",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-03T05:07:41.996797Z",
     "iopub.status.busy": "2024-07-03T05:07:41.996070Z",
     "iopub.status.idle": "2024-07-03T05:11:48.566563Z",
     "shell.execute_reply": "2024-07-03T05:11:48.565692Z"
    },
    "id": "CRbGiqWuWmvf",
    "papermill": {
     "duration": 246.613697,
     "end_time": "2024-07-03T05:11:48.568710",
     "exception": false,
     "start_time": "2024-07-03T05:07:41.955013",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Selected device is cuda\n",
      "Number of trainable params:  261415\n",
      "Epoch 1/100 --> loss:1.7260, acc:23.04%, val_loss:1.8636, val_acc:19.51%\n",
      "Epoch 2/100 --> loss:1.6213, acc:28.86%, val_loss:1.7900, val_acc:24.39%\n",
      "Epoch 3/100 --> loss:1.5786, acc:31.06%, val_loss:1.9215, val_acc:21.14%\n",
      "Epoch 4/100 --> loss:1.5296, acc:34.01%, val_loss:1.8913, val_acc:25.20%\n",
      "Epoch 5/100 --> loss:1.5172, acc:33.67%, val_loss:1.7596, val_acc:28.46%\n",
      "Epoch 6/100 --> loss:1.4871, acc:34.18%, val_loss:1.6261, val_acc:33.33%\n",
      "Epoch 7/100 --> loss:1.4445, acc:36.28%, val_loss:1.4808, val_acc:43.90%\n",
      "Epoch 8/100 --> loss:1.4275, acc:38.25%, val_loss:1.5236, val_acc:34.15%\n",
      "Epoch 9/100 --> loss:1.3897, acc:40.07%, val_loss:1.5120, val_acc:32.52%\n",
      "Epoch 10/100 --> loss:1.3746, acc:41.16%, val_loss:1.4543, val_acc:39.02%\n",
      "Epoch 11/100 --> loss:1.3574, acc:42.01%, val_loss:1.3176, val_acc:43.09%\n",
      "Epoch 12/100 --> loss:1.3344, acc:42.07%, val_loss:1.3635, val_acc:41.46%\n",
      "Epoch 13/100 --> loss:1.2917, acc:44.85%, val_loss:1.3104, val_acc:47.15%\n",
      "Epoch 14/100 --> loss:1.2674, acc:46.21%, val_loss:1.2761, val_acc:46.34%\n",
      "Epoch 15/100 --> loss:1.2605, acc:46.82%, val_loss:1.2422, val_acc:48.78%\n",
      "Epoch 16/100 --> loss:1.2227, acc:48.98%, val_loss:1.3113, val_acc:43.90%\n",
      "Epoch 17/100 --> loss:1.2007, acc:49.90%, val_loss:1.3852, val_acc:45.53%\n",
      "Epoch 18/100 --> loss:1.1870, acc:51.19%, val_loss:1.3408, val_acc:47.97%\n",
      "Epoch 19/100 --> loss:1.1720, acc:51.96%, val_loss:1.2926, val_acc:47.97%\n",
      "Epoch 20/100 --> loss:1.1380, acc:53.15%, val_loss:1.3308, val_acc:47.97%\n",
      "Epoch 21/100 --> loss:1.1438, acc:52.24%, val_loss:1.3780, val_acc:43.09%\n",
      "Epoch 22/100 --> loss:1.1124, acc:54.30%, val_loss:1.2091, val_acc:51.22%\n",
      "Epoch 23/100 --> loss:1.1074, acc:55.83%, val_loss:1.2367, val_acc:49.59%\n",
      "Epoch 24/100 --> loss:1.0901, acc:56.94%, val_loss:1.1218, val_acc:55.28%\n",
      "Epoch 25/100 --> loss:1.0568, acc:57.42%, val_loss:1.2536, val_acc:45.53%\n",
      "Epoch 26/100 --> loss:1.0481, acc:57.05%, val_loss:1.3643, val_acc:43.90%\n",
      "Epoch 27/100 --> loss:1.0180, acc:58.91%, val_loss:1.2067, val_acc:52.85%\n",
      "Epoch 28/100 --> loss:1.0057, acc:59.08%, val_loss:1.2952, val_acc:46.34%\n",
      "Epoch 29/100 --> loss:0.9819, acc:60.77%, val_loss:1.3338, val_acc:43.90%\n",
      "Epoch 30/100 --> loss:0.9680, acc:60.67%, val_loss:1.2575, val_acc:52.03%\n",
      "Epoch 31/100 --> loss:0.9627, acc:61.28%, val_loss:1.1466, val_acc:51.22%\n",
      "Epoch 32/100 --> loss:0.9484, acc:62.30%, val_loss:1.0832, val_acc:55.28%\n",
      "Epoch 33/100 --> loss:0.9291, acc:62.84%, val_loss:1.1776, val_acc:51.22%\n",
      "Epoch 34/100 --> loss:0.9031, acc:63.01%, val_loss:1.2725, val_acc:51.22%\n",
      "Epoch 35/100 --> loss:0.8691, acc:65.01%, val_loss:1.2844, val_acc:48.78%\n",
      "Epoch 36/100 --> loss:0.8709, acc:63.82%, val_loss:1.1018, val_acc:55.28%\n",
      "Epoch 37/100 --> loss:0.8376, acc:66.77%, val_loss:1.1584, val_acc:47.15%\n",
      "Epoch 38/100 --> loss:0.8286, acc:67.38%, val_loss:1.1451, val_acc:52.85%\n",
      "Epoch 39/100 --> loss:0.8328, acc:66.94%, val_loss:1.1713, val_acc:53.66%\n",
      "Epoch 40/100 --> loss:0.7859, acc:68.60%, val_loss:1.0829, val_acc:55.28%\n",
      "Epoch 41/100 --> loss:0.7663, acc:69.38%, val_loss:1.1002, val_acc:54.47%\n",
      "Epoch 42/100 --> loss:0.7357, acc:71.78%, val_loss:1.1299, val_acc:54.47%\n",
      "Epoch 43/100 --> loss:0.7559, acc:69.61%, val_loss:1.1269, val_acc:53.66%\n",
      "Epoch 44/100 --> loss:0.7445, acc:70.09%, val_loss:1.1225, val_acc:55.28%\n",
      "Epoch 45/100 --> loss:0.7035, acc:72.22%, val_loss:1.0932, val_acc:53.66%\n",
      "Epoch 46/100 --> loss:0.6973, acc:72.39%, val_loss:1.1811, val_acc:52.03%\n",
      "Epoch 47/100 --> loss:0.6681, acc:73.51%, val_loss:1.1552, val_acc:56.10%\n",
      "Epoch 48/100 --> loss:0.6488, acc:74.46%, val_loss:1.2321, val_acc:53.66%\n",
      "Epoch 49/100 --> loss:0.6905, acc:72.32%, val_loss:1.2510, val_acc:50.41%\n",
      "Epoch 50/100 --> loss:0.6127, acc:75.95%, val_loss:1.1852, val_acc:52.85%\n",
      "Epoch 51/100 --> loss:0.5853, acc:77.27%, val_loss:1.1674, val_acc:56.91%\n",
      "Epoch 52/100 --> loss:0.5982, acc:77.00%, val_loss:1.1423, val_acc:53.66%\n",
      "Epoch 53/100 --> loss:0.5900, acc:76.66%, val_loss:1.3165, val_acc:51.22%\n",
      "Epoch 54/100 --> loss:0.5780, acc:76.90%, val_loss:1.1940, val_acc:52.03%\n",
      "Epoch 55/100 --> loss:0.5413, acc:78.59%, val_loss:1.2658, val_acc:52.85%\n",
      "Epoch 56/100 --> loss:0.5399, acc:79.57%, val_loss:1.1079, val_acc:60.98%\n",
      "Epoch 57/100 --> loss:0.5217, acc:79.95%, val_loss:1.1917, val_acc:55.28%\n",
      "Epoch 58/100 --> loss:0.4771, acc:82.18%, val_loss:1.1194, val_acc:63.41%\n",
      "Epoch 59/100 --> loss:0.4569, acc:82.59%, val_loss:1.2385, val_acc:55.28%\n",
      "Epoch 60/100 --> loss:0.4998, acc:80.35%, val_loss:1.3120, val_acc:55.28%\n",
      "Epoch 61/100 --> loss:0.4264, acc:83.67%, val_loss:1.2425, val_acc:56.91%\n",
      "Epoch 62/100 --> loss:0.4072, acc:84.72%, val_loss:1.2804, val_acc:53.66%\n",
      "Epoch 63/100 --> loss:0.4275, acc:84.49%, val_loss:1.2717, val_acc:56.91%\n",
      "Epoch 64/100 --> loss:0.4157, acc:84.49%, val_loss:1.3367, val_acc:54.47%\n",
      "Epoch 65/100 --> loss:0.4541, acc:82.86%, val_loss:1.2692, val_acc:55.28%\n",
      "Epoch 66/100 --> loss:0.3965, acc:84.62%, val_loss:1.3772, val_acc:59.35%\n",
      "Epoch 67/100 --> loss:0.3602, acc:86.72%, val_loss:1.3505, val_acc:60.16%\n",
      "Epoch 68/100 --> loss:0.3719, acc:85.60%, val_loss:1.3669, val_acc:56.10%\n",
      "Epoch 69/100 --> loss:0.3470, acc:87.87%, val_loss:1.5507, val_acc:52.03%\n",
      "Epoch 70/100 --> loss:0.3216, acc:88.55%, val_loss:1.3047, val_acc:59.35%\n",
      "Epoch 71/100 --> loss:0.2861, acc:90.14%, val_loss:1.4538, val_acc:57.72%\n",
      "Epoch 72/100 --> loss:0.3487, acc:87.20%, val_loss:1.4436, val_acc:57.72%\n",
      "Epoch 73/100 --> loss:0.3769, acc:85.67%, val_loss:1.2814, val_acc:64.23%\n",
      "Epoch 74/100 --> loss:0.2646, acc:90.68%, val_loss:1.3176, val_acc:61.79%\n",
      "Epoch 75/100 --> loss:0.2861, acc:90.38%, val_loss:1.2635, val_acc:61.79%\n",
      "Epoch 76/100 --> loss:0.3060, acc:88.69%, val_loss:1.3123, val_acc:60.16%\n",
      "Epoch 77/100 --> loss:0.3014, acc:89.36%, val_loss:1.5954, val_acc:50.41%\n",
      "Epoch 78/100 --> loss:0.2800, acc:89.84%, val_loss:1.3184, val_acc:59.35%\n",
      "Epoch 79/100 --> loss:0.2505, acc:90.65%, val_loss:1.4263, val_acc:58.54%\n",
      "Epoch 80/100 --> loss:0.2689, acc:90.58%, val_loss:1.2554, val_acc:64.23%\n",
      "Epoch 81/100 --> loss:0.2572, acc:90.72%, val_loss:1.4027, val_acc:60.16%\n",
      "Epoch 82/100 --> loss:0.2201, acc:91.94%, val_loss:1.4276, val_acc:56.10%\n",
      "Epoch 83/100 --> loss:0.2431, acc:90.92%, val_loss:1.2950, val_acc:62.60%\n",
      "Epoch 84/100 --> loss:0.2294, acc:91.67%, val_loss:1.4627, val_acc:59.35%\n",
      "Epoch 85/100 --> loss:0.2548, acc:90.18%, val_loss:1.4659, val_acc:60.98%\n",
      "Epoch 86/100 --> loss:0.2071, acc:93.36%, val_loss:1.4980, val_acc:59.35%\n",
      "Epoch 87/100 --> loss:0.2032, acc:92.72%, val_loss:1.6637, val_acc:52.85%\n",
      "Epoch 88/100 --> loss:0.2324, acc:92.24%, val_loss:1.5337, val_acc:53.66%\n",
      "Epoch 89/100 --> loss:0.2557, acc:90.75%, val_loss:1.4734, val_acc:56.91%\n",
      "Epoch 90/100 --> loss:0.1872, acc:93.73%, val_loss:1.6074, val_acc:59.35%\n",
      "Epoch 91/100 --> loss:0.2122, acc:92.31%, val_loss:1.5437, val_acc:56.91%\n",
      "Epoch 92/100 --> loss:0.1949, acc:93.46%, val_loss:1.3966, val_acc:63.41%\n",
      "Epoch 93/100 --> loss:0.1565, acc:94.72%, val_loss:1.6040, val_acc:58.54%\n",
      "Epoch 94/100 --> loss:0.1362, acc:95.83%, val_loss:1.4800, val_acc:61.79%\n",
      "Epoch 95/100 --> loss:0.1763, acc:93.73%, val_loss:1.5148, val_acc:61.79%\n",
      "Epoch 96/100 --> loss:0.1886, acc:93.60%, val_loss:1.4215, val_acc:61.79%\n",
      "Epoch 97/100 --> loss:0.1464, acc:95.29%, val_loss:1.6023, val_acc:57.72%\n",
      "Epoch 98/100 --> loss:0.1472, acc:95.16%, val_loss:1.5778, val_acc:56.91%\n",
      "Epoch 99/100 --> loss:0.3126, acc:88.25%, val_loss:1.4215, val_acc:60.98%\n",
      "Epoch 100/100 --> loss:0.1440, acc:95.46%, val_loss:1.4513, val_acc:62.60%\n"
     ]
    }
   ],
   "source": [
    "EPOCHS = 100\n",
    "DATASET_SIZE = X_train.shape[0]\n",
    "BATCH_SIZE = 32\n",
    "device = 'cuda' if torch.cuda.is_available() else 'cpu'\n",
    "print('Selected device is {}'.format(device))\n",
    "model = ParallelModel(num_emotions=len(EMOTIONS)).to(device)\n",
    "print('Number of trainable params: ', sum(p.numel() for p in model.parameters()))\n",
    "OPTIMIZER = torch.optim.SGD(model.parameters(), lr=0.01, weight_decay=1e-3, momentum=0.8)\n",
    "\n",
    "train_step = make_train_step(model, loss_fnc, optimizer=OPTIMIZER)\n",
    "validate = make_validate_fnc(model, loss_fnc)\n",
    "losses = []\n",
    "val_losses = []\n",
    "\n",
    "for epoch in range(EPOCHS):\n",
    "    # Shuffle data\n",
    "    ind = np.random.permutation(DATASET_SIZE)\n",
    "    X_train = X_train[ind,:,:,:]\n",
    "    Y_train = Y_train[ind]\n",
    "    \n",
    "    epoch_acc = 0\n",
    "    epoch_loss = 0\n",
    "    iters = int(DATASET_SIZE / BATCH_SIZE)\n",
    "    \n",
    "    for i in range(iters):\n",
    "        batch_start = i * BATCH_SIZE\n",
    "        batch_end = min(batch_start + BATCH_SIZE, DATASET_SIZE)\n",
    "        actual_batch_size = batch_end - batch_start\n",
    "        X = X_train[batch_start:batch_end,:,:,:]\n",
    "        Y = Y_train[batch_start:batch_end]\n",
    "        X_tensor = torch.tensor(X, device=device).float()\n",
    "        Y_tensor = torch.tensor(Y, dtype=torch.long, device=device)\n",
    "        loss, acc = train_step(X_tensor, Y_tensor)\n",
    "        epoch_acc += acc * actual_batch_size / DATASET_SIZE\n",
    "        epoch_loss += loss * actual_batch_size / DATASET_SIZE\n",
    "    \n",
    "    X_val_tensor = torch.tensor(X_val, device=device).float()\n",
    "    Y_val_tensor = torch.tensor(Y_val, dtype=torch.long, device=device)\n",
    "    val_loss, val_acc, _ = validate(X_val_tensor, Y_val_tensor)\n",
    "    losses.append(epoch_loss)\n",
    "    val_losses.append(val_loss)\n",
    "    \n",
    "    print(f\"Epoch {epoch+1}/{EPOCHS} --> loss:{epoch_loss:.4f}, acc:{epoch_acc:.2f}%, val_loss:{val_loss:.4f}, val_acc:{val_acc:.2f}%\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a5652c00",
   "metadata": {
    "id": "xwysi2poWmvf",
    "papermill": {
     "duration": 0.050191,
     "end_time": "2024-07-03T05:11:48.669468",
     "exception": false,
     "start_time": "2024-07-03T05:11:48.619277",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Save model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "82ad3162",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-03T05:11:48.771892Z",
     "iopub.status.busy": "2024-07-03T05:11:48.771098Z",
     "iopub.status.idle": "2024-07-03T05:11:48.784680Z",
     "shell.execute_reply": "2024-07-03T05:11:48.783741Z"
    },
    "id": "KbJcOvkUWmvg",
    "papermill": {
     "duration": 0.066678,
     "end_time": "2024-07-03T05:11:48.786684",
     "exception": false,
     "start_time": "2024-07-03T05:11:48.720006",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model is saved to /kaggle/working/models/cnn_lstm_parallel_model.pt\n"
     ]
    }
   ],
   "source": [
    "SAVE_PATH = os.path.join(os.getcwd(),'models')\n",
    "os.makedirs('models',exist_ok=True)\n",
    "torch.save(model.state_dict(),os.path.join(SAVE_PATH,'cnn_lstm_parallel_model.pt'))\n",
    "print('Model is saved to {}'.format(os.path.join(SAVE_PATH,'cnn_lstm_parallel_model.pt')))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "972506da",
   "metadata": {
    "id": "ltVwqKGpWmvg",
    "papermill": {
     "duration": 0.047654,
     "end_time": "2024-07-03T05:11:48.883740",
     "exception": false,
     "start_time": "2024-07-03T05:11:48.836086",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Load model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "39452507",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-03T05:11:48.980517Z",
     "iopub.status.busy": "2024-07-03T05:11:48.979745Z",
     "iopub.status.idle": "2024-07-03T05:11:48.999192Z",
     "shell.execute_reply": "2024-07-03T05:11:48.998289Z"
    },
    "id": "EKXnTrlZWmvg",
    "papermill": {
     "duration": 0.069636,
     "end_time": "2024-07-03T05:11:49.000903",
     "exception": false,
     "start_time": "2024-07-03T05:11:48.931267",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model is loaded from /kaggle/working/models/cnn_lstm_parallel_model.pt\n"
     ]
    }
   ],
   "source": [
    "LOAD_PATH = os.path.join(os.getcwd(),'models')\n",
    "model = ParallelModel(len(EMOTIONS))\n",
    "model.load_state_dict(torch.load(os.path.join(LOAD_PATH,'cnn_lstm_parallel_model.pt')))\n",
    "print('Model is loaded from {}'.format(os.path.join(LOAD_PATH,'cnn_lstm_parallel_model.pt')))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d191c925",
   "metadata": {
    "id": "Y-OAi2f0Wmvg",
    "papermill": {
     "duration": 0.047686,
     "end_time": "2024-07-03T05:11:49.096047",
     "exception": false,
     "start_time": "2024-07-03T05:11:49.048361",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Test"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "8f99141b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-03T05:11:49.197442Z",
     "iopub.status.busy": "2024-07-03T05:11:49.197114Z",
     "iopub.status.idle": "2024-07-03T05:11:49.225816Z",
     "shell.execute_reply": "2024-07-03T05:11:49.224792Z"
    },
    "id": "AXIYDQajWmvh",
    "papermill": {
     "duration": 0.08206,
     "end_time": "2024-07-03T05:11:49.227696",
     "exception": false,
     "start_time": "2024-07-03T05:11:49.145636",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Test loss is 1.428\n",
      "Test accuracy is 59.52%\n"
     ]
    }
   ],
   "source": [
    "X_test_tensor = torch.tensor(X_test,device=device).float()\n",
    "Y_test_tensor = torch.tensor(Y_test,dtype=torch.long,device=device)\n",
    "test_loss, test_acc, predictions = validate(X_test_tensor,Y_test_tensor)\n",
    "print(f'Test loss is {test_loss:.3f}')\n",
    "print(f'Test accuracy is {test_acc:.2f}%')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "407aa47e",
   "metadata": {
    "id": "3KfDrZcCWmvi",
    "papermill": {
     "duration": 0.047354,
     "end_time": "2024-07-03T05:11:49.322901",
     "exception": false,
     "start_time": "2024-07-03T05:11:49.275547",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Plot loss"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "6735b4c9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-03T05:11:49.422925Z",
     "iopub.status.busy": "2024-07-03T05:11:49.422349Z",
     "iopub.status.idle": "2024-07-03T05:11:49.715652Z",
     "shell.execute_reply": "2024-07-03T05:11:49.714817Z"
    },
    "id": "m2EuoqsAWmvj",
    "papermill": {
     "duration": 0.34582,
     "end_time": "2024-07-03T05:11:49.717786",
     "exception": false,
     "start_time": "2024-07-03T05:11:49.371966",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.legend.Legend at 0x78c549acdea0>"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.plot(losses,'b')\n",
    "plt.plot(val_losses,'r')\n",
    "plt.legend(['train loss','val loss'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "c994b8e1",
   "metadata": {
    "papermill": {
     "duration": 0.049443,
     "end_time": "2024-07-03T05:11:49.816490",
     "exception": false,
     "start_time": "2024-07-03T05:11:49.767047",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "colab": {
   "name": "parallel-cnn-attention-lstm.ipynb",
   "provenance": [],
   "toc_visible": true
  },
  "kaggle": {
   "accelerator": "nvidiaTeslaT4",
   "dataSources": [
    {
     "datasetId": 5166533,
     "sourceId": 8629160,
     "sourceType": "datasetVersion"
    }
   ],
   "dockerImageVersionId": 30732,
   "isGpuEnabled": true,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.13"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 338.13628,
   "end_time": "2024-07-03T05:11:51.689675",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2024-07-03T05:06:13.553395",
   "version": "2.5.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
