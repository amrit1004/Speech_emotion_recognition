{"metadata":{"colab":{"name":"parallel-cnn-attention-lstm.ipynb","provenance":[],"toc_visible":true},"kernelspec":{"display_name":"Python 3","language":"python","name":"python3"},"language_info":{"name":"python","version":"3.10.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"markdown","source":"# Load file names","metadata":{"id":"acBn0jSXWmvJ"}},{"cell_type":"code","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np\nimport pandas as pd\nimport os\nimport librosa\nimport librosa.display\nimport IPython\nfrom IPython.display import Audio\nfrom IPython.display import Image\nimport matplotlib.pyplot as plt\n\nEMOTIONS = {1:'Anger', 2:'Disgust', 3:'Fear', 4:'Happy', 5:'Sad', 6:'Neutral'} # surprise je promenjen sa 8 na 0\nDATA_PATH = '/kaggle/input/indian-emotion/Audio Mode Only'\nSAMPLE_RATE = 48000\n\ndata = []\n\nfor emotion_id, emotion_name in EMOTIONS.items():\n    emotion_folder = os.path.join(DATA_PATH, emotion_name)\n    \n    for dirname, _, filenames in os.walk(emotion_folder):\n        for filename in filenames:\n            file_path = os.path.join(dirname, filename)\n            \n            data.append({\n                \"Emotion\": emotion_id,\n                \"Path\": file_path\n            })\n\ndata = pd.DataFrame(data)\nprint(data.head())\n\n# You can write up to 5GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","metadata":{"_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","id":"L4isFoVsWmvN","execution":{"iopub.status.busy":"2024-07-02T13:16:17.529068Z","iopub.execute_input":"2024-07-02T13:16:17.529940Z","iopub.status.idle":"2024-07-02T13:16:17.551049Z","shell.execute_reply.started":"2024-07-02T13:16:17.529911Z","shell.execute_reply":"2024-07-02T13:16:17.550247Z"},"trusted":true},"execution_count":3,"outputs":[{"name":"stdout","text":"   Emotion                                               Path\n0        1  /kaggle/input/indian-emotion/Audio Mode Only/A...\n1        1  /kaggle/input/indian-emotion/Audio Mode Only/A...\n2        1  /kaggle/input/indian-emotion/Audio Mode Only/A...\n3        1  /kaggle/input/indian-emotion/Audio Mode Only/A...\n4        1  /kaggle/input/indian-emotion/Audio Mode Only/A...\n","output_type":"stream"}]},{"cell_type":"code","source":"data['Emotion'].unique()","metadata":{"_cell_guid":"79c7e3d0-c299-4dcb-8224-4455121ee9b0","_uuid":"d629ff2d2480ee46fbb7e2d37f6b5fab8052498a","id":"4ML1evkjWmvP","execution":{"iopub.status.busy":"2024-07-02T13:16:58.627667Z","iopub.execute_input":"2024-07-02T13:16:58.628002Z","iopub.status.idle":"2024-07-02T13:16:58.636885Z","shell.execute_reply.started":"2024-07-02T13:16:58.627977Z","shell.execute_reply":"2024-07-02T13:16:58.635851Z"},"trusted":true},"execution_count":5,"outputs":[{"execution_count":5,"output_type":"execute_result","data":{"text/plain":"array([1, 2, 3, 4, 5, 6])"},"metadata":{}}]},{"cell_type":"markdown","source":"Number of examples per emotion","metadata":{"id":"CiwyLlFVWmvQ"}},{"cell_type":"code","source":"fig = plt.figure()\nax = fig.add_subplot(111)\nax.bar(x=range(6), height=data['Emotion'].value_counts())\nax.set_xticks(ticks=range(6))\nax.set_xticklabels([EMOTIONS for i in range(6)],fontsize=10)\nax.set_xlabel('Emotions')\nax.set_ylabel('Number of examples')","metadata":{"id":"E-lc-Gh6WmvQ","execution":{"iopub.status.busy":"2024-07-02T13:21:40.350211Z","iopub.execute_input":"2024-07-02T13:21:40.350567Z","iopub.status.idle":"2024-07-02T13:21:40.589356Z","shell.execute_reply.started":"2024-07-02T13:21:40.350539Z","shell.execute_reply":"2024-07-02T13:21:40.588167Z"},"trusted":true},"execution_count":12,"outputs":[{"execution_count":12,"output_type":"execute_result","data":{"text/plain":"Text(0, 0.5, 'Number of examples')"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<Figure size 640x480 with 1 Axes>","image/png":""},"metadata":{}}]},{"cell_type":"markdown","source":"number of examples per gender","metadata":{"id":"MIW_k_HBWmvR"}},{"cell_type":"markdown","source":"number of examples per emotion intensity","metadata":{"id":"vuTqjg8BWmvS"}},{"cell_type":"markdown","source":"# Load the signals","metadata":{"id":"aYePgCseWmvU"}},{"cell_type":"code","source":"mel_spectrograms = []\nsignals = []\nfor i, file_path in enumerate(data.Path):\n    audio, sample_rate = librosa.load(file_path, duration=3, offset=0.5, sr=SAMPLE_RATE)\n    signal = np.zeros((int(SAMPLE_RATE*3,)))\n    signal[:len(audio)] = audio\n    signals.append(signal)\n    print(\"\\r Processed {}/{} files\".format(i,len(data)),end='')\nsignals = np.stack(signals,axis=0)","metadata":{"id":"_8g9QufkWmvU","execution":{"iopub.status.busy":"2024-07-02T13:22:02.535349Z","iopub.execute_input":"2024-07-02T13:22:02.536057Z","iopub.status.idle":"2024-07-02T13:22:40.984722Z","shell.execute_reply.started":"2024-07-02T13:22:02.536025Z","shell.execute_reply":"2024-07-02T13:22:40.983848Z"},"trusted":true},"execution_count":13,"outputs":[{"name":"stdout","text":" Processed 34/1233 files","output_type":"stream"},{"name":"stderr","text":"/tmp/ipykernel_34/2624433725.py:4: UserWarning: PySoundFile failed. Trying audioread instead.\n  audio, sample_rate = librosa.load(file_path, duration=3, offset=0.5, sr=SAMPLE_RATE)\n/opt/conda/lib/python3.10/site-packages/librosa/core/audio.py:184: FutureWarning: librosa.core.audio.__audioread_load\n\tDeprecated as of librosa version 0.10.0.\n\tIt will be removed in librosa version 1.0.\n  y, sr_native = __audioread_load(path, offset, duration, dtype)\n","output_type":"stream"},{"name":"stdout","text":" Processed 232/1233 files","output_type":"stream"},{"name":"stderr","text":"/tmp/ipykernel_34/2624433725.py:4: UserWarning: PySoundFile failed. Trying audioread instead.\n  audio, sample_rate = librosa.load(file_path, duration=3, offset=0.5, sr=SAMPLE_RATE)\n/opt/conda/lib/python3.10/site-packages/librosa/core/audio.py:184: FutureWarning: librosa.core.audio.__audioread_load\n\tDeprecated as of librosa version 0.10.0.\n\tIt will be removed in librosa version 1.0.\n  y, sr_native = __audioread_load(path, offset, duration, dtype)\n","output_type":"stream"},{"name":"stdout","text":" Processed 1232/1233 files","output_type":"stream"}]},{"cell_type":"code","source":"emotion_ind = list(data.loc[data.Emotion==emotion,'Emotion'].index)\nemotion_ind = np.random.permutation(emotion_ind)","metadata":{"execution":{"iopub.status.busy":"2024-07-02T13:24:24.770375Z","iopub.execute_input":"2024-07-02T13:24:24.771035Z","iopub.status.idle":"2024-07-02T13:24:24.776728Z","shell.execute_reply.started":"2024-07-02T13:24:24.771003Z","shell.execute_reply":"2024-07-02T13:24:24.775589Z"},"trusted":true},"execution_count":15,"outputs":[]},{"cell_type":"code","source":"emotion_ind = list(data.loc[data.Emotion==emotion,'Emotion'].index.astype(int))","metadata":{"execution":{"iopub.status.busy":"2024-07-02T13:24:42.320217Z","iopub.execute_input":"2024-07-02T13:24:42.320913Z","iopub.status.idle":"2024-07-02T13:24:42.326351Z","shell.execute_reply.started":"2024-07-02T13:24:42.320879Z","shell.execute_reply":"2024-07-02T13:24:42.325285Z"},"trusted":true},"execution_count":16,"outputs":[]},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# Split the data","metadata":{"id":"QVW1Av6BWmvV"}},{"cell_type":"code","source":"X = signals\ntrain_ind,test_ind,val_ind = [],[],[]\nX_train,X_val,X_test = [],[],[]\nY_train,Y_val,Y_test = [],[],[]\nfor emotion in range(len(EMOTIONS)):\n    emotion_ind = list(data.loc[data.Emotion==emotion,'Emotion'].index)\n    emotion_ind = np.random.permutation(emotion_ind)\n    m = len(emotion_ind)\n    ind_train = emotion_ind[:int(0.8*m)].astype(int)\n    ind_val = emotion_ind[int(0.8*m):int(0.9*m)].astype(int)\n    ind_test = emotion_ind[int(0.9*m):].astype(int)\n    X_train.append(X[ind_train,:])\n    Y_train.append(np.array([emotion]*len(ind_train),dtype=np.int32))\n    X_val.append(X[ind_val,:])\n    Y_val.append(np.array([emotion]*len(ind_val),dtype=np.int32))\n    X_test.append(X[ind_test,:])\n    Y_test.append(np.array([emotion]*len(ind_test),dtype=np.int32))\n    train_ind.append(ind_train)\n    test_ind.append(ind_test)\n    val_ind.append(ind_val)\nX_train = np.concatenate(X_train,0)\nX_val = np.concatenate(X_val,0)\nX_test = np.concatenate(X_test,0)\nY_train = np.concatenate(Y_train,0)\nY_val = np.concatenate(Y_val,0)\nY_test = np.concatenate(Y_test,0)\ntrain_ind = np.concatenate(train_ind,0)\nval_ind = np.concatenate(val_ind,0)\ntest_ind = np.concatenate(test_ind,0)\nprint(f'X_train:{X_train.shape}, Y_train:{Y_train.shape}')\nprint(f'X_val:{X_val.shape}, Y_val:{Y_val.shape}')\nprint(f'X_test:{X_test.shape}, Y_test:{Y_test.shape}')\n# check if all are unique\nunique, count = np.unique(np.concatenate([train_ind,test_ind,val_ind],0), return_counts=True)\nprint(\"Number of unique indexes is {}, out of {}\".format(sum(count==1), X.shape[0]))\n\ndel X","metadata":{"id":"qXduocCHWmvV","execution":{"iopub.status.busy":"2024-07-02T13:25:55.818762Z","iopub.execute_input":"2024-07-02T13:25:55.819459Z","iopub.status.idle":"2024-07-02T13:25:56.795554Z","shell.execute_reply.started":"2024-07-02T13:25:55.819426Z","shell.execute_reply":"2024-07-02T13:25:56.794526Z"},"trusted":true},"execution_count":18,"outputs":[{"name":"stdout","text":"X_train:(820, 144000), Y_train:(820,)\nX_val:(103, 144000), Y_val:(103,)\nX_test:(105, 144000), Y_test:(105,)\nNumber of unique indexes is 1028, out of 1233\n","output_type":"stream"}]},{"cell_type":"markdown","source":"# Augment signals by adding AWGN","metadata":{"id":"KQgfbrsXWmvW"}},{"cell_type":"code","source":"def addAWGN(signal, num_bits=16, augmented_num=2, snr_low=15, snr_high=30): \n    signal_len = len(signal)\n    # Generate White Gaussian noise\n    noise = np.random.normal(size=(augmented_num, signal_len))\n    # Normalize signal and noise\n    norm_constant = 2.0**(num_bits-1)\n    signal_norm = signal / norm_constant\n    noise_norm = noise / norm_constant\n    # Compute signal and noise power\n    s_power = np.sum(signal_norm ** 2) / signal_len\n    n_power = np.sum(noise_norm ** 2, axis=1) / signal_len\n    # Random SNR: Uniform [15, 30] in dB\n    target_snr = np.random.randint(snr_low, snr_high)\n    # Compute K (covariance matrix) for each noise \n    K = np.sqrt((s_power / n_power) * 10 ** (- target_snr / 10))\n    K = np.ones((signal_len, augmented_num)) * K  \n    # Generate noisy signal\n    return signal + K.T * noise","metadata":{"id":"RbhKUl6kWmvX","execution":{"iopub.status.busy":"2024-07-02T13:27:32.972643Z","iopub.execute_input":"2024-07-02T13:27:32.973344Z","iopub.status.idle":"2024-07-02T13:27:32.980556Z","shell.execute_reply.started":"2024-07-02T13:27:32.973310Z","shell.execute_reply":"2024-07-02T13:27:32.979620Z"},"trusted":true},"execution_count":19,"outputs":[]},{"cell_type":"code","source":"import pandas as pd\nimport numpy as np\n\naug_signals = []\naug_labels = []\nfor i in range(X_train.shape[0]):\n    signal = X_train[i,:]\n    augmented_signals = addAWGN(signal)\n    for j in range(augmented_signals.shape[0]):\n        aug_labels.append(data.loc[i,\"Emotion\"])\n        aug_signals.append(augmented_signals[j,:])\n        # Correct the concatenation here\n        data = pd.concat([data, data.iloc[[i]]], ignore_index=True)\n    print(\"\\r Processed {}/{} files\".format(i+1,X_train.shape[0]), end='')\n\naug_signals = np.stack(aug_signals, axis=0)\nX_train = np.concatenate([X_train, aug_signals], axis=0)\naug_labels = np.array(aug_labels)  # Convert to numpy array\nY_train = np.concatenate([Y_train, aug_labels])\n\nprint('')\nprint(f'X_train:{X_train.shape}, Y_train:{Y_train.shape}')","metadata":{"id":"X1toUPgkWmvY","execution":{"iopub.status.busy":"2024-07-02T13:28:42.681262Z","iopub.execute_input":"2024-07-02T13:28:42.681647Z","iopub.status.idle":"2024-07-02T13:28:54.483148Z","shell.execute_reply.started":"2024-07-02T13:28:42.681616Z","shell.execute_reply":"2024-07-02T13:28:54.482186Z"},"trusted":true},"execution_count":23,"outputs":[{"name":"stdout","text":" Processed 820/820 files\nX_train:(2460, 144000), Y_train:(2460,)\n","output_type":"stream"}]},{"cell_type":"markdown","source":"# Calculate mel spectrograms","metadata":{"id":"vM2L_HIrWmvZ"}},{"cell_type":"code","source":"def getMELspectrogram(audio, sample_rate):\n    mel_spec = librosa.feature.melspectrogram(y=audio,\n                                              sr=sample_rate,\n                                              n_fft=1024,\n                                              win_length = 512,\n                                              window='hamming',\n                                              hop_length = 256,\n                                              n_mels=128,\n                                              fmax=sample_rate/2\n                                             )\n    mel_spec_db = librosa.power_to_db(mel_spec, ref=np.max)\n    return mel_spec_db\n\n# test function\naudio, sample_rate = librosa.load(data.loc[0,'Path'], duration=3, offset=0.5,sr=SAMPLE_RATE)\nsignal = np.zeros((int(SAMPLE_RATE*3,)))\nsignal[:len(audio)] = audio\nmel_spectrogram = getMELspectrogram(signal, SAMPLE_RATE)\nlibrosa.display.specshow(mel_spectrogram, y_axis='mel', x_axis='time')\nprint('MEL spectrogram shape: ',mel_spectrogram.shape)","metadata":{"id":"SjOQZFmUWmvZ","execution":{"iopub.status.busy":"2024-07-02T13:29:10.971799Z","iopub.execute_input":"2024-07-02T13:29:10.972143Z","iopub.status.idle":"2024-07-02T13:29:12.380166Z","shell.execute_reply.started":"2024-07-02T13:29:10.972106Z","shell.execute_reply":"2024-07-02T13:29:12.379191Z"},"trusted":true},"execution_count":24,"outputs":[{"name":"stdout","text":"MEL spectrogram shape:  (128, 563)\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"<Figure size 640x480 with 1 Axes>","image/png":""},"metadata":{}}]},{"cell_type":"code","source":"mel_train = []\nprint(\"Calculatin mel spectrograms for train set\")\nfor i in range(X_train.shape[0]):\n    mel_spectrogram = getMELspectrogram(X_train[i,:], sample_rate=SAMPLE_RATE)\n    mel_train.append(mel_spectrogram)\n    print(\"\\r Processed {}/{} files\".format(i,X_train.shape[0]),end='')\nprint('')\nmel_train = np.stack(mel_train,axis=0)\ndel X_train\nX_train = mel_train\n\nmel_val = []\nprint(\"Calculatin mel spectrograms for val set\")\nfor i in range(X_val.shape[0]):\n    mel_spectrogram = getMELspectrogram(X_val[i,:], sample_rate=SAMPLE_RATE)\n    mel_val.append(mel_spectrogram)\n    print(\"\\r Processed {}/{} files\".format(i,X_val.shape[0]),end='')\nprint('')\nmel_val = np.stack(mel_val,axis=0)\ndel X_val\nX_val = mel_val\n\nmel_test = []\nprint(\"Calculatin mel spectrograms for test set\")\nfor i in range(X_test.shape[0]):\n    mel_spectrogram = getMELspectrogram(X_test[i,:], sample_rate=SAMPLE_RATE)\n    mel_test.append(mel_spectrogram)\n    print(\"\\r Processed {}/{} files\".format(i,X_test.shape[0]),end='')\nprint('')\nmel_test = np.stack(mel_test,axis=0)\ndel X_test\nX_test = mel_test\n\nprint(f'X_train:{X_train.shape}, Y_train:{Y_train.shape}')\nprint(f'X_val:{X_val.shape}, Y_val:{Y_val.shape}')\nprint(f'X_test:{X_test.shape}, Y_test:{Y_test.shape}')","metadata":{"id":"vsu9C-Z_Wmva","execution":{"iopub.status.busy":"2024-07-02T13:29:36.068992Z","iopub.execute_input":"2024-07-02T13:29:36.069645Z","iopub.status.idle":"2024-07-02T13:30:31.256459Z","shell.execute_reply.started":"2024-07-02T13:29:36.069615Z","shell.execute_reply":"2024-07-02T13:30:31.255166Z"},"trusted":true},"execution_count":25,"outputs":[{"name":"stdout","text":"Calculatin mel spectrograms for train set\n Processed 2459/2460 files\nCalculatin mel spectrograms for val set\n Processed 102/103 files\nCalculatin mel spectrograms for test set\n Processed 104/105 files\nX_train:(2460, 128, 563), Y_train:(2460,)\nX_val:(103, 128, 563), Y_val:(103,)\nX_test:(105, 128, 563), Y_test:(105,)\n","output_type":"stream"}]},{"cell_type":"markdown","source":"# Create the model","metadata":{"id":"E71VeUp5Wmvb"}},{"cell_type":"code","source":"import torch\nimport torch.nn as nn\n\nclass ParallelModel(nn.Module):\n    def __init__(self,num_emotions):\n        super().__init__()\n        # conv block\n        self.conv2Dblock = nn.Sequential(\n            # 1. conv block\n            nn.Conv2d(in_channels=1,\n                       out_channels=16,\n                       kernel_size=3,\n                       stride=1,\n                       padding=1\n                      ),\n            nn.BatchNorm2d(16),\n            nn.ReLU(),\n            nn.MaxPool2d(kernel_size=2, stride=2),\n            nn.Dropout(p=0.3),\n            # 2. conv block\n            nn.Conv2d(in_channels=16,\n                       out_channels=32,\n                       kernel_size=3,\n                       stride=1,\n                       padding=1\n                      ),\n            nn.BatchNorm2d(32),\n            nn.ReLU(),\n            nn.MaxPool2d(kernel_size=4, stride=4),\n            nn.Dropout(p=0.3),\n            # 3. conv block\n            nn.Conv2d(in_channels=32,\n                       out_channels=64,\n                       kernel_size=3,\n                       stride=1,\n                       padding=1\n                      ),\n            nn.BatchNorm2d(64),\n            nn.ReLU(),\n            nn.MaxPool2d(kernel_size=4, stride=4),\n            nn.Dropout(p=0.3),\n            # 4. conv block\n            nn.Conv2d(in_channels=64,\n                       out_channels=64,\n                       kernel_size=3,\n                       stride=1,\n                       padding=1\n                      ),\n            nn.BatchNorm2d(64),\n            nn.ReLU(),\n            nn.MaxPool2d(kernel_size=4, stride=4),\n            nn.Dropout(p=0.3)\n        )\n        # LSTM block\n        self.lstm_maxpool = nn.MaxPool2d(kernel_size=[2,4], stride=[2,4])\n        hidden_size = 128\n        self.lstm = nn.LSTM(input_size=64,hidden_size=hidden_size,bidirectional=True, batch_first=True)\n        self.dropout_lstm = nn.Dropout(0.1)\n        self.attention_linear = nn.Linear(2*hidden_size,1) # 2*hidden_size for the 2 outputs of bidir LSTM\n        # Linear softmax layer\n        self.out_linear = nn.Linear(2*hidden_size+256,num_emotions)\n        self.dropout_linear = nn.Dropout(p=0)\n        self.out_softmax = nn.Softmax(dim=1)\n    def forward(self,x):\n        # conv embedding\n        conv_embedding = self.conv2Dblock(x) #(b,channel,freq,time)\n        conv_embedding = torch.flatten(conv_embedding, start_dim=1) # do not flatten batch dimension\n        # lstm embedding\n        x_reduced = self.lstm_maxpool(x)\n        x_reduced = torch.squeeze(x_reduced,1)\n        x_reduced = x_reduced.permute(0,2,1) # (b,t,freq)\n        lstm_embedding, (h,c) = self.lstm(x_reduced) # (b, time, hidden_size*2)\n        lstm_embedding = self.dropout_lstm(lstm_embedding)\n        batch_size,T,_ = lstm_embedding.shape \n        attention_weights = [None]*T\n        for t in range(T):\n            embedding = lstm_embedding[:,t,:]\n            attention_weights[t] = self.attention_linear(embedding)\n        attention_weights_norm = nn.functional.softmax(torch.stack(attention_weights,-1),-1)\n        attention = torch.bmm(attention_weights_norm,lstm_embedding) # (Bx1xT)*(B,T,hidden_size*2)=(B,1,2*hidden_size)\n        attention = torch.squeeze(attention, 1)\n        # concatenate\n        complete_embedding = torch.cat([conv_embedding, attention], dim=1) \n        \n        output_logits = self.out_linear(complete_embedding)\n        output_logits = self.dropout_linear(output_logits)\n        output_softmax = self.out_softmax(output_logits)\n        return output_logits, output_softmax, attention_weights_norm\n                                     ","metadata":{"id":"Cb5FUckmWmvc","execution":{"iopub.status.busy":"2024-07-02T13:31:02.672707Z","iopub.execute_input":"2024-07-02T13:31:02.673048Z","iopub.status.idle":"2024-07-02T13:31:05.513414Z","shell.execute_reply.started":"2024-07-02T13:31:02.673023Z","shell.execute_reply":"2024-07-02T13:31:05.512433Z"},"trusted":true},"execution_count":26,"outputs":[]},{"cell_type":"code","source":"def loss_fnc(predictions, targets):\n    return nn.CrossEntropyLoss()(input=predictions,target=targets)","metadata":{"id":"8w51AKkUWmvd","execution":{"iopub.status.busy":"2024-07-02T13:31:19.643228Z","iopub.execute_input":"2024-07-02T13:31:19.643778Z","iopub.status.idle":"2024-07-02T13:31:19.648476Z","shell.execute_reply.started":"2024-07-02T13:31:19.643752Z","shell.execute_reply":"2024-07-02T13:31:19.647362Z"},"trusted":true},"execution_count":27,"outputs":[]},{"cell_type":"markdown","source":"# TRAINING","metadata":{"id":"10sxtTuNWmvd"}},{"cell_type":"code","source":"def make_train_step(model, loss_fnc, optimizer):\n    def train_step(X,Y):\n        # set model to train mode\n        model.train()\n        # forward pass\n        output_logits, output_softmax, attention_weights_norm = model(X)\n        predictions = torch.argmax(output_softmax,dim=1)\n        accuracy = torch.sum(Y==predictions)/float(len(Y))\n        # compute loss\n        loss = loss_fnc(output_logits, Y)\n        # compute gradients\n        loss.backward()\n        # update parameters and zero gradients\n        optimizer.step()\n        optimizer.zero_grad()\n        return loss.item(), accuracy*100\n    return train_step","metadata":{"id":"EE987u5qWmvd","execution":{"iopub.status.busy":"2024-07-02T13:31:26.451985Z","iopub.execute_input":"2024-07-02T13:31:26.452371Z","iopub.status.idle":"2024-07-02T13:31:26.460145Z","shell.execute_reply.started":"2024-07-02T13:31:26.452341Z","shell.execute_reply":"2024-07-02T13:31:26.459053Z"},"trusted":true},"execution_count":28,"outputs":[]},{"cell_type":"code","source":"def make_validate_fnc(model,loss_fnc):\n    def validate(X,Y):\n        with torch.no_grad():\n            model.eval()\n            output_logits, output_softmax, attention_weights_norm = model(X)\n            predictions = torch.argmax(output_softmax,dim=1)\n            accuracy = torch.sum(Y==predictions)/float(len(Y))\n            loss = loss_fnc(output_logits,Y)\n        return loss.item(), accuracy*100, predictions\n    return validate","metadata":{"id":"pP0GGToIWmve","execution":{"iopub.status.busy":"2024-07-02T13:31:33.070260Z","iopub.execute_input":"2024-07-02T13:31:33.070870Z","iopub.status.idle":"2024-07-02T13:31:33.076999Z","shell.execute_reply.started":"2024-07-02T13:31:33.070839Z","shell.execute_reply":"2024-07-02T13:31:33.075954Z"},"trusted":true},"execution_count":29,"outputs":[]},{"cell_type":"markdown","source":"scale data","metadata":{"id":"xbTE4Rr_Wmve"}},{"cell_type":"code","source":"from sklearn.preprocessing import StandardScaler\n\nX_train = np.expand_dims(X_train,1)\nX_val = np.expand_dims(X_val,1)\nX_test = np.expand_dims(X_test,1)\n\nscaler = StandardScaler()\n\nb,c,h,w = X_train.shape\nX_train = np.reshape(X_train, newshape=(b,-1))\nX_train = scaler.fit_transform(X_train)\nX_train = np.reshape(X_train, newshape=(b,c,h,w))\n\nb,c,h,w = X_test.shape\nX_test = np.reshape(X_test, newshape=(b,-1))\nX_test = scaler.transform(X_test)\nX_test = np.reshape(X_test, newshape=(b,c,h,w))\n\nb,c,h,w = X_val.shape\nX_val = np.reshape(X_val, newshape=(b,-1))\nX_val = scaler.transform(X_val)\nX_val = np.reshape(X_val, newshape=(b,c,h,w))","metadata":{"id":"Nqy3qHcoWmve","execution":{"iopub.status.busy":"2024-07-02T13:31:36.717362Z","iopub.execute_input":"2024-07-02T13:31:36.718056Z","iopub.status.idle":"2024-07-02T13:31:39.149989Z","shell.execute_reply.started":"2024-07-02T13:31:36.718028Z","shell.execute_reply":"2024-07-02T13:31:39.149121Z"},"trusted":true},"execution_count":30,"outputs":[]},{"cell_type":"markdown","source":"Train the model","metadata":{"id":"tDN-lRs7Wmvf"}},{"cell_type":"code","source":"EPOCHS=1000\nDATASET_SIZE = X_train.shape[0]\nBATCH_SIZE = 32\ndevice = 'cuda' if torch.cuda.is_available() else 'cpu'\nprint('Selected device is {}'.format(device))\nmodel = ParallelModel(num_emotions=len(EMOTIONS)).to(device)\nprint('Number of trainable params: ',sum(p.numel() for p in model.parameters()) )\nOPTIMIZER = torch.optim.SGD(model.parameters(),lr=0.01, weight_decay=1e-3, momentum=0.8)\n\ntrain_step = make_train_step(model, loss_fnc, optimizer=OPTIMIZER)\nvalidate = make_validate_fnc(model,loss_fnc)\nlosses=[]\nval_losses = []\nfor epoch in range(EPOCHS):\n    # schuffle data\n    ind = np.random.permutation(DATASET_SIZE)\n    X_train = X_train[ind,:,:,:]\n    Y_train = Y_train[ind]\n    epoch_acc = 0\n    epoch_loss = 0\n    iters = int(DATASET_SIZE / BATCH_SIZE)\n    for i in range(iters):\n        batch_start = i * BATCH_SIZE\n        batch_end = min(batch_start + BATCH_SIZE, DATASET_SIZE)\n        actual_batch_size = batch_end-batch_start\n        X = X_train[batch_start:batch_end,:,:,:]\n        Y = Y_train[batch_start:batch_end]\n        X_tensor = torch.tensor(X,device=device).float()\n        Y_tensor = torch.tensor(Y, dtype=torch.long,device=device)\n        loss, acc = train_step(X_tensor,Y_tensor)\n        epoch_acc += acc*actual_batch_size/DATASET_SIZE\n        epoch_loss += loss*actual_batch_size/DATASET_SIZE\n        print(f\"\\r Epoch {epoch}: iteration {i}/{iters}\",end='')\n    X_val_tensor = torch.tensor(X_val,device=device).float()\n    Y_val_tensor = torch.tensor(Y_val,dtype=torch.long,device=device)\n    val_loss, val_acc, _ = validate(X_val_tensor,Y_val_tensor)\n    losses.append(epoch_loss)\n    val_losses.append(val_loss)\n    print('')\n    print(f\"Epoch {epoch} --> loss:{epoch_loss:.4f}, acc:{epoch_acc:.2f}%, val_loss:{val_loss:.4f}, val_acc:{val_acc:.2f}%\")\n    ","metadata":{"id":"CRbGiqWuWmvf","execution":{"iopub.status.busy":"2024-07-02T13:53:24.989563Z","iopub.execute_input":"2024-07-02T13:53:24.989975Z","iopub.status.idle":"2024-07-02T14:19:46.959093Z","shell.execute_reply.started":"2024-07-02T13:53:24.989946Z","shell.execute_reply":"2024-07-02T14:19:46.957282Z"},"trusted":true},"execution_count":39,"outputs":[{"name":"stdout","text":"Selected device is cuda\nNumber of trainable params:  262567\n Epoch 0: iteration 75/76\nEpoch 0 --> loss:1.7228, acc:28.13%, val_loss:1.6050, val_acc:29.13%\n Epoch 1: iteration 75/76\nEpoch 1 --> loss:1.5133, acc:30.65%, val_loss:1.6041, val_acc:29.13%\n Epoch 2: iteration 75/76\nEpoch 2 --> loss:1.4629, acc:34.19%, val_loss:1.7069, val_acc:21.36%\n Epoch 3: iteration 75/76\nEpoch 3 --> loss:1.4212, acc:34.02%, val_loss:1.6587, val_acc:18.45%\n Epoch 4: iteration 75/76\nEpoch 4 --> loss:1.4058, acc:36.14%, val_loss:1.5453, val_acc:32.04%\n Epoch 5: iteration 75/76\nEpoch 5 --> loss:1.3532, acc:38.66%, val_loss:1.5424, val_acc:33.01%\n Epoch 6: iteration 75/76\nEpoch 6 --> loss:1.3560, acc:39.15%, val_loss:1.5174, val_acc:37.86%\n Epoch 7: iteration 75/76\nEpoch 7 --> loss:1.3543, acc:40.20%, val_loss:1.4994, val_acc:33.98%\n Epoch 8: iteration 75/76\nEpoch 8 --> loss:1.3398, acc:39.72%, val_loss:1.4896, val_acc:40.78%\n Epoch 9: iteration 75/76\nEpoch 9 --> loss:1.3133, acc:40.53%, val_loss:1.5493, val_acc:36.89%\n Epoch 10: iteration 75/76\nEpoch 10 --> loss:1.2954, acc:42.03%, val_loss:1.4393, val_acc:44.66%\n Epoch 11: iteration 75/76\nEpoch 11 --> loss:1.2856, acc:42.11%, val_loss:1.5124, val_acc:38.83%\n Epoch 12: iteration 75/76\nEpoch 12 --> loss:1.2783, acc:42.64%, val_loss:1.4930, val_acc:35.92%\n Epoch 13: iteration 75/76\nEpoch 13 --> loss:1.2513, acc:43.29%, val_loss:1.3959, val_acc:41.75%\n Epoch 14: iteration 75/76\nEpoch 14 --> loss:1.2517, acc:43.58%, val_loss:1.3805, val_acc:45.63%\n Epoch 15: iteration 75/76\nEpoch 15 --> loss:1.2400, acc:44.39%, val_loss:1.4602, val_acc:33.98%\n Epoch 16: iteration 75/76\nEpoch 16 --> loss:1.2213, acc:45.61%, val_loss:1.4453, val_acc:43.69%\n Epoch 17: iteration 75/76\nEpoch 17 --> loss:1.2006, acc:47.52%, val_loss:1.4705, val_acc:36.89%\n Epoch 18: iteration 75/76\nEpoch 18 --> loss:1.1928, acc:48.17%, val_loss:1.3976, val_acc:41.75%\n Epoch 19: iteration 75/76\nEpoch 19 --> loss:1.1907, acc:47.56%, val_loss:1.3685, val_acc:45.63%\n Epoch 20: iteration 75/76\nEpoch 20 --> loss:1.1741, acc:48.70%, val_loss:1.4096, val_acc:36.89%\n Epoch 21: iteration 75/76\nEpoch 21 --> loss:1.1409, acc:51.42%, val_loss:1.3876, val_acc:40.78%\n Epoch 22: iteration 75/76\nEpoch 22 --> loss:1.1267, acc:51.75%, val_loss:1.4389, val_acc:38.83%\n Epoch 23: iteration 75/76\nEpoch 23 --> loss:1.1719, acc:49.11%, val_loss:1.4494, val_acc:38.83%\n Epoch 24: iteration 75/76\nEpoch 24 --> loss:1.1049, acc:53.46%, val_loss:1.2800, val_acc:46.60%\n Epoch 25: iteration 75/76\nEpoch 25 --> loss:1.0912, acc:52.44%, val_loss:1.2927, val_acc:40.78%\n Epoch 26: iteration 75/76\nEpoch 26 --> loss:1.0935, acc:52.52%, val_loss:1.2814, val_acc:47.57%\n Epoch 27: iteration 75/76\nEpoch 27 --> loss:1.0860, acc:53.46%, val_loss:1.2696, val_acc:46.60%\n Epoch 28: iteration 75/76\nEpoch 28 --> loss:1.0748, acc:53.82%, val_loss:1.3354, val_acc:41.75%\n Epoch 29: iteration 75/76\nEpoch 29 --> loss:1.0550, acc:54.84%, val_loss:1.2189, val_acc:49.51%\n Epoch 30: iteration 75/76\nEpoch 30 --> loss:1.0193, acc:56.91%, val_loss:1.2796, val_acc:48.54%\n Epoch 31: iteration 75/76\nEpoch 31 --> loss:1.0106, acc:57.60%, val_loss:1.3062, val_acc:45.63%\n Epoch 32: iteration 75/76\nEpoch 32 --> loss:1.0288, acc:56.10%, val_loss:1.2637, val_acc:47.57%\n Epoch 33: iteration 75/76\nEpoch 33 --> loss:1.0150, acc:56.30%, val_loss:1.3773, val_acc:41.75%\n Epoch 34: iteration 75/76\nEpoch 34 --> loss:0.9815, acc:58.41%, val_loss:1.2978, val_acc:41.75%\n Epoch 35: iteration 75/76\nEpoch 35 --> loss:0.9700, acc:58.94%, val_loss:1.2771, val_acc:43.69%\n Epoch 36: iteration 75/76\nEpoch 36 --> loss:0.9710, acc:59.43%, val_loss:1.3071, val_acc:46.60%\n Epoch 37: iteration 75/76\nEpoch 37 --> loss:0.9697, acc:58.66%, val_loss:1.5233, val_acc:38.83%\n Epoch 38: iteration 75/76\nEpoch 38 --> loss:0.9595, acc:59.15%, val_loss:1.2367, val_acc:46.60%\n Epoch 39: iteration 75/76\nEpoch 39 --> loss:0.9418, acc:60.53%, val_loss:1.2683, val_acc:45.63%\n Epoch 40: iteration 75/76\nEpoch 40 --> loss:0.9247, acc:60.93%, val_loss:1.4347, val_acc:40.78%\n Epoch 41: iteration 75/76\nEpoch 41 --> loss:0.9069, acc:61.75%, val_loss:1.4286, val_acc:35.92%\n Epoch 42: iteration 75/76\nEpoch 42 --> loss:0.8974, acc:63.01%, val_loss:1.3026, val_acc:46.60%\n Epoch 43: iteration 75/76\nEpoch 43 --> loss:0.9060, acc:63.21%, val_loss:1.2795, val_acc:43.69%\n Epoch 44: iteration 75/76\nEpoch 44 --> loss:0.8693, acc:64.43%, val_loss:1.1959, val_acc:51.46%\n Epoch 45: iteration 75/76\nEpoch 45 --> loss:0.8928, acc:63.17%, val_loss:1.3090, val_acc:44.66%\n Epoch 46: iteration 75/76\nEpoch 46 --> loss:0.8766, acc:61.83%, val_loss:1.3870, val_acc:42.72%\n Epoch 47: iteration 75/76\nEpoch 47 --> loss:0.8485, acc:64.31%, val_loss:1.2077, val_acc:51.46%\n Epoch 48: iteration 75/76\nEpoch 48 --> loss:0.8220, acc:66.95%, val_loss:1.2200, val_acc:48.54%\n Epoch 49: iteration 75/76\nEpoch 49 --> loss:0.8278, acc:66.59%, val_loss:1.1169, val_acc:52.43%\n Epoch 50: iteration 75/76\nEpoch 50 --> loss:0.8166, acc:67.48%, val_loss:1.1814, val_acc:46.60%\n Epoch 51: iteration 75/76\nEpoch 51 --> loss:0.7977, acc:67.28%, val_loss:1.1598, val_acc:50.49%\n Epoch 52: iteration 75/76\nEpoch 52 --> loss:0.8183, acc:66.59%, val_loss:1.2691, val_acc:45.63%\n Epoch 53: iteration 75/76\nEpoch 53 --> loss:0.7842, acc:68.09%, val_loss:1.3643, val_acc:44.66%\n Epoch 54: iteration 75/76\nEpoch 54 --> loss:0.7716, acc:68.25%, val_loss:1.2131, val_acc:47.57%\n Epoch 55: iteration 75/76\nEpoch 55 --> loss:0.7581, acc:68.82%, val_loss:1.2398, val_acc:45.63%\n Epoch 56: iteration 75/76\nEpoch 56 --> loss:0.7572, acc:68.01%, val_loss:1.2517, val_acc:48.54%\n Epoch 57: iteration 75/76\nEpoch 57 --> loss:0.7216, acc:70.57%, val_loss:1.1557, val_acc:48.54%\n Epoch 58: iteration 75/76\nEpoch 58 --> loss:0.7019, acc:71.83%, val_loss:1.1913, val_acc:48.54%\n Epoch 59: iteration 75/76\nEpoch 59 --> loss:0.6865, acc:72.56%, val_loss:1.3221, val_acc:48.54%\n Epoch 60: iteration 75/76\nEpoch 60 --> loss:0.7386, acc:68.98%, val_loss:1.2008, val_acc:50.49%\n Epoch 61: iteration 75/76\nEpoch 61 --> loss:0.7325, acc:70.33%, val_loss:1.1898, val_acc:48.54%\n Epoch 62: iteration 75/76\nEpoch 62 --> loss:0.6999, acc:70.85%, val_loss:1.1418, val_acc:55.34%\n Epoch 63: iteration 75/76\nEpoch 63 --> loss:0.6340, acc:74.59%, val_loss:1.1639, val_acc:52.43%\n Epoch 64: iteration 75/76\nEpoch 64 --> loss:0.6602, acc:72.52%, val_loss:1.2773, val_acc:48.54%\n Epoch 65: iteration 75/76\nEpoch 65 --> loss:0.6320, acc:75.04%, val_loss:1.1970, val_acc:51.46%\n Epoch 66: iteration 75/76\nEpoch 66 --> loss:0.6858, acc:71.54%, val_loss:1.2695, val_acc:53.40%\n Epoch 67: iteration 75/76\nEpoch 67 --> loss:0.6271, acc:74.31%, val_loss:1.1991, val_acc:49.51%\n Epoch 68: iteration 75/76\nEpoch 68 --> loss:0.6620, acc:72.85%, val_loss:1.2288, val_acc:51.46%\n Epoch 69: iteration 75/76\nEpoch 69 --> loss:0.6161, acc:75.28%, val_loss:1.2956, val_acc:52.43%\n Epoch 70: iteration 75/76\nEpoch 70 --> loss:0.5957, acc:76.22%, val_loss:1.1854, val_acc:53.40%\n Epoch 71: iteration 75/76\nEpoch 71 --> loss:0.5734, acc:77.24%, val_loss:1.2970, val_acc:47.57%\n Epoch 72: iteration 75/76\nEpoch 72 --> loss:0.5537, acc:78.41%, val_loss:1.2338, val_acc:55.34%\n Epoch 73: iteration 75/76\nEpoch 73 --> loss:0.6380, acc:73.74%, val_loss:1.2738, val_acc:47.57%\n Epoch 74: iteration 75/76\nEpoch 74 --> loss:0.5468, acc:78.17%, val_loss:1.2683, val_acc:54.37%\n Epoch 75: iteration 75/76\nEpoch 75 --> loss:0.5220, acc:78.62%, val_loss:1.4186, val_acc:50.49%\n Epoch 76: iteration 75/76\nEpoch 76 --> loss:0.5276, acc:78.41%, val_loss:1.4684, val_acc:52.43%\n Epoch 77: iteration 75/76\nEpoch 77 --> loss:0.5212, acc:78.94%, val_loss:1.4679, val_acc:49.51%\n Epoch 78: iteration 75/76\nEpoch 78 --> loss:0.5644, acc:76.79%, val_loss:1.2729, val_acc:53.40%\n Epoch 79: iteration 75/76\nEpoch 79 --> loss:0.4840, acc:81.38%, val_loss:1.4138, val_acc:53.40%\n Epoch 80: iteration 75/76\nEpoch 80 --> loss:0.5009, acc:80.49%, val_loss:1.2290, val_acc:55.34%\n Epoch 81: iteration 75/76\nEpoch 81 --> loss:0.4900, acc:80.49%, val_loss:1.4206, val_acc:48.54%\n Epoch 82: iteration 75/76\nEpoch 82 --> loss:0.4602, acc:81.91%, val_loss:1.3061, val_acc:54.37%\n Epoch 83: iteration 75/76\nEpoch 83 --> loss:0.4557, acc:81.83%, val_loss:1.3715, val_acc:50.49%\n Epoch 84: iteration 75/76\nEpoch 84 --> loss:0.4041, acc:84.07%, val_loss:1.3373, val_acc:49.51%\n Epoch 85: iteration 75/76\nEpoch 85 --> loss:0.4463, acc:81.95%, val_loss:1.3817, val_acc:53.40%\n Epoch 86: iteration 75/76\nEpoch 86 --> loss:0.4732, acc:81.42%, val_loss:1.3167, val_acc:54.37%\n Epoch 87: iteration 75/76\nEpoch 87 --> loss:0.3936, acc:84.84%, val_loss:1.4146, val_acc:56.31%\n Epoch 88: iteration 75/76\nEpoch 88 --> loss:0.4156, acc:83.74%, val_loss:1.3088, val_acc:52.43%\n Epoch 89: iteration 75/76\nEpoch 89 --> loss:0.4218, acc:83.74%, val_loss:1.3653, val_acc:52.43%\n Epoch 90: iteration 75/76\nEpoch 90 --> loss:0.3274, acc:87.56%, val_loss:1.4015, val_acc:48.54%\n Epoch 91: iteration 75/76\nEpoch 91 --> loss:0.3692, acc:85.04%, val_loss:1.4387, val_acc:56.31%\n Epoch 92: iteration 75/76\nEpoch 92 --> loss:0.3958, acc:83.82%, val_loss:1.3707, val_acc:51.46%\n Epoch 93: iteration 75/76\nEpoch 93 --> loss:0.3515, acc:86.14%, val_loss:1.3613, val_acc:53.40%\n Epoch 94: iteration 75/76\nEpoch 94 --> loss:0.3659, acc:85.61%, val_loss:1.3075, val_acc:54.37%\n Epoch 95: iteration 75/76\nEpoch 95 --> loss:0.3167, acc:87.64%, val_loss:1.5370, val_acc:53.40%\n Epoch 96: iteration 75/76\nEpoch 96 --> loss:0.3114, acc:88.25%, val_loss:1.5555, val_acc:53.40%\n Epoch 97: iteration 75/76\nEpoch 97 --> loss:0.3422, acc:87.11%, val_loss:1.5799, val_acc:49.51%\n Epoch 98: iteration 75/76\nEpoch 98 --> loss:0.2832, acc:89.15%, val_loss:1.5145, val_acc:56.31%\n Epoch 99: iteration 75/76\nEpoch 99 --> loss:0.2958, acc:88.98%, val_loss:1.3161, val_acc:59.22%\n Epoch 100: iteration 75/76\nEpoch 100 --> loss:0.3085, acc:87.60%, val_loss:1.3477, val_acc:54.37%\n Epoch 101: iteration 75/76\nEpoch 101 --> loss:0.2655, acc:89.51%, val_loss:1.3125, val_acc:57.28%\n Epoch 102: iteration 75/76\nEpoch 102 --> loss:0.2766, acc:89.35%, val_loss:1.6229, val_acc:46.60%\n Epoch 103: iteration 75/76\nEpoch 103 --> loss:0.2487, acc:90.45%, val_loss:1.5658, val_acc:54.37%\n Epoch 104: iteration 75/76\nEpoch 104 --> loss:0.2872, acc:88.37%, val_loss:1.3318, val_acc:57.28%\n Epoch 105: iteration 75/76\nEpoch 105 --> loss:0.2451, acc:90.41%, val_loss:1.3525, val_acc:53.40%\n Epoch 106: iteration 75/76\nEpoch 106 --> loss:0.2993, acc:88.54%, val_loss:1.5064, val_acc:56.31%\n Epoch 107: iteration 75/76\nEpoch 107 --> loss:0.2610, acc:90.16%, val_loss:1.3802, val_acc:57.28%\n Epoch 108: iteration 75/76\nEpoch 108 --> loss:0.2782, acc:88.98%, val_loss:1.4976, val_acc:47.57%\n Epoch 109: iteration 75/76\nEpoch 109 --> loss:0.2482, acc:90.57%, val_loss:1.6384, val_acc:54.37%\n Epoch 110: iteration 75/76\nEpoch 110 --> loss:0.1906, acc:92.93%, val_loss:1.5586, val_acc:53.40%\n Epoch 111: iteration 75/76\nEpoch 111 --> loss:0.1633, acc:94.23%, val_loss:1.4084, val_acc:52.43%\n Epoch 112: iteration 75/76\nEpoch 112 --> loss:0.1855, acc:92.56%, val_loss:1.8799, val_acc:52.43%\n Epoch 113: iteration 75/76\nEpoch 113 --> loss:0.1860, acc:93.09%, val_loss:1.6262, val_acc:52.43%\n Epoch 114: iteration 75/76\nEpoch 114 --> loss:0.2267, acc:91.22%, val_loss:1.5130, val_acc:51.46%\n Epoch 115: iteration 75/76\nEpoch 115 --> loss:0.2106, acc:92.44%, val_loss:1.5967, val_acc:50.49%\n Epoch 116: iteration 75/76\nEpoch 116 --> loss:0.2326, acc:90.73%, val_loss:1.5844, val_acc:57.28%\n Epoch 117: iteration 75/76\nEpoch 117 --> loss:0.2035, acc:92.15%, val_loss:1.5780, val_acc:55.34%\n Epoch 118: iteration 75/76\nEpoch 118 --> loss:0.1802, acc:92.48%, val_loss:1.5746, val_acc:59.22%\n Epoch 119: iteration 75/76\nEpoch 119 --> loss:0.2105, acc:91.99%, val_loss:1.5937, val_acc:61.17%\n Epoch 120: iteration 75/76\nEpoch 120 --> loss:0.2385, acc:89.96%, val_loss:1.3197, val_acc:59.22%\n Epoch 121: iteration 75/76\nEpoch 121 --> loss:0.3238, acc:86.54%, val_loss:1.3764, val_acc:60.19%\n Epoch 122: iteration 75/76\nEpoch 122 --> loss:0.1833, acc:93.29%, val_loss:1.4186, val_acc:54.37%\n Epoch 123: iteration 75/76\nEpoch 123 --> loss:0.1615, acc:94.51%, val_loss:1.4912, val_acc:54.37%\n Epoch 124: iteration 75/76\nEpoch 124 --> loss:0.2058, acc:91.42%, val_loss:1.6105, val_acc:56.31%\n Epoch 125: iteration 75/76\nEpoch 125 --> loss:0.1701, acc:93.74%, val_loss:1.4704, val_acc:57.28%\n Epoch 126: iteration 75/76\nEpoch 126 --> loss:0.1505, acc:94.35%, val_loss:1.4702, val_acc:53.40%\n Epoch 127: iteration 75/76\nEpoch 127 --> loss:0.2801, acc:88.70%, val_loss:1.4813, val_acc:58.25%\n Epoch 128: iteration 75/76\nEpoch 128 --> loss:0.2199, acc:91.63%, val_loss:1.4745, val_acc:52.43%\n Epoch 129: iteration 75/76\nEpoch 129 --> loss:0.2249, acc:91.79%, val_loss:1.4055, val_acc:57.28%\n Epoch 130: iteration 75/76\nEpoch 130 --> loss:0.2411, acc:90.45%, val_loss:1.4774, val_acc:57.28%\n Epoch 131: iteration 75/76\nEpoch 131 --> loss:0.1448, acc:95.04%, val_loss:1.8108, val_acc:47.57%\n Epoch 132: iteration 75/76\nEpoch 132 --> loss:0.1739, acc:92.60%, val_loss:1.6258, val_acc:51.46%\n Epoch 133: iteration 75/76\nEpoch 133 --> loss:0.2039, acc:92.28%, val_loss:1.6067, val_acc:48.54%\n Epoch 134: iteration 75/76\nEpoch 134 --> loss:0.2041, acc:92.07%, val_loss:1.6725, val_acc:44.66%\n Epoch 135: iteration 75/76\nEpoch 135 --> loss:0.2350, acc:91.10%, val_loss:1.6749, val_acc:54.37%\n Epoch 136: iteration 75/76\nEpoch 136 --> loss:0.2021, acc:92.48%, val_loss:1.5645, val_acc:52.43%\n Epoch 137: iteration 75/76\nEpoch 137 --> loss:0.1114, acc:95.89%, val_loss:1.5206, val_acc:59.22%\n Epoch 138: iteration 75/76\nEpoch 138 --> loss:0.1177, acc:95.69%, val_loss:1.6824, val_acc:51.46%\n Epoch 139: iteration 75/76\nEpoch 139 --> loss:0.1014, acc:96.59%, val_loss:1.6784, val_acc:57.28%\n Epoch 140: iteration 75/76\nEpoch 140 --> loss:0.1211, acc:95.49%, val_loss:1.5803, val_acc:55.34%\n Epoch 141: iteration 75/76\nEpoch 141 --> loss:0.0804, acc:96.83%, val_loss:1.5404, val_acc:54.37%\n Epoch 142: iteration 75/76\nEpoch 142 --> loss:0.0825, acc:97.32%, val_loss:1.7037, val_acc:53.40%\n Epoch 143: iteration 75/76\nEpoch 143 --> loss:0.1097, acc:95.49%, val_loss:1.6854, val_acc:51.46%\n Epoch 144: iteration 75/76\nEpoch 144 --> loss:0.1992, acc:92.20%, val_loss:1.5748, val_acc:52.43%\n Epoch 145: iteration 75/76\nEpoch 145 --> loss:0.0878, acc:96.63%, val_loss:1.6988, val_acc:54.37%\n Epoch 146: iteration 75/76\nEpoch 146 --> loss:0.0702, acc:97.60%, val_loss:1.8473, val_acc:53.40%\n Epoch 147: iteration 75/76\nEpoch 147 --> loss:0.0810, acc:96.95%, val_loss:1.6884, val_acc:59.22%\n Epoch 148: iteration 75/76\nEpoch 148 --> loss:0.0575, acc:98.09%, val_loss:1.8367, val_acc:52.43%\n Epoch 149: iteration 75/76\nEpoch 149 --> loss:0.0811, acc:96.34%, val_loss:1.9262, val_acc:51.46%\n Epoch 150: iteration 75/76\nEpoch 150 --> loss:0.0960, acc:96.14%, val_loss:1.7965, val_acc:50.49%\n Epoch 151: iteration 75/76\nEpoch 151 --> loss:0.0926, acc:96.63%, val_loss:1.8879, val_acc:48.54%\n Epoch 152: iteration 75/76\nEpoch 152 --> loss:0.0806, acc:96.95%, val_loss:1.7673, val_acc:54.37%\n Epoch 153: iteration 75/76\nEpoch 153 --> loss:0.0954, acc:96.34%, val_loss:2.0192, val_acc:55.34%\n Epoch 154: iteration 75/76\nEpoch 154 --> loss:0.1100, acc:95.81%, val_loss:1.6793, val_acc:55.34%\n Epoch 155: iteration 75/76\nEpoch 155 --> loss:0.1059, acc:96.14%, val_loss:1.7958, val_acc:50.49%\n Epoch 156: iteration 75/76\nEpoch 156 --> loss:0.0614, acc:97.80%, val_loss:1.8454, val_acc:54.37%\n Epoch 157: iteration 75/76\nEpoch 157 --> loss:0.1507, acc:94.23%, val_loss:1.6875, val_acc:53.40%\n Epoch 158: iteration 75/76\nEpoch 158 --> loss:0.2940, acc:88.17%, val_loss:1.7361, val_acc:55.34%\n Epoch 159: iteration 75/76\nEpoch 159 --> loss:0.2061, acc:91.75%, val_loss:1.8183, val_acc:55.34%\n Epoch 160: iteration 75/76\nEpoch 160 --> loss:0.1164, acc:95.73%, val_loss:1.7699, val_acc:55.34%\n Epoch 161: iteration 75/76\nEpoch 161 --> loss:0.2213, acc:90.65%, val_loss:1.6913, val_acc:55.34%\n Epoch 162: iteration 75/76\nEpoch 162 --> loss:0.1789, acc:92.93%, val_loss:1.6191, val_acc:57.28%\n Epoch 163: iteration 75/76\nEpoch 163 --> loss:0.1239, acc:95.45%, val_loss:1.4658, val_acc:60.19%\n Epoch 164: iteration 75/76\nEpoch 164 --> loss:0.1036, acc:95.93%, val_loss:1.7035, val_acc:59.22%\n Epoch 165: iteration 75/76\nEpoch 165 --> loss:0.1002, acc:96.63%, val_loss:1.9355, val_acc:52.43%\n Epoch 166: iteration 75/76\nEpoch 166 --> loss:0.1121, acc:95.69%, val_loss:1.6882, val_acc:57.28%\n Epoch 167: iteration 75/76\nEpoch 167 --> loss:0.1880, acc:92.56%, val_loss:1.7819, val_acc:47.57%\n Epoch 168: iteration 75/76\nEpoch 168 --> loss:0.1616, acc:93.58%, val_loss:1.6384, val_acc:57.28%\n Epoch 169: iteration 75/76\nEpoch 169 --> loss:0.1221, acc:95.57%, val_loss:1.7459, val_acc:57.28%\n Epoch 170: iteration 75/76\nEpoch 170 --> loss:0.0635, acc:97.60%, val_loss:1.7864, val_acc:55.34%\n Epoch 171: iteration 75/76\nEpoch 171 --> loss:0.0505, acc:98.13%, val_loss:1.8636, val_acc:54.37%\n Epoch 172: iteration 75/76\nEpoch 172 --> loss:0.0446, acc:98.25%, val_loss:1.8660, val_acc:58.25%\n Epoch 173: iteration 75/76\nEpoch 173 --> loss:0.0461, acc:98.09%, val_loss:1.7780, val_acc:53.40%\n Epoch 174: iteration 75/76\nEpoch 174 --> loss:0.0386, acc:98.21%, val_loss:1.6702, val_acc:59.22%\n Epoch 175: iteration 75/76\nEpoch 175 --> loss:0.0692, acc:97.07%, val_loss:1.7495, val_acc:57.28%\n Epoch 176: iteration 75/76\nEpoch 176 --> loss:0.0684, acc:97.32%, val_loss:1.7653, val_acc:54.37%\n Epoch 177: iteration 75/76\nEpoch 177 --> loss:0.1030, acc:95.73%, val_loss:1.7741, val_acc:57.28%\n Epoch 178: iteration 75/76\nEpoch 178 --> loss:0.1852, acc:92.32%, val_loss:1.6115, val_acc:59.22%\n Epoch 179: iteration 75/76\nEpoch 179 --> loss:0.0837, acc:96.83%, val_loss:1.7611, val_acc:58.25%\n Epoch 180: iteration 75/76\nEpoch 180 --> loss:0.0867, acc:96.22%, val_loss:1.9917, val_acc:55.34%\n Epoch 181: iteration 75/76\nEpoch 181 --> loss:0.2091, acc:91.79%, val_loss:1.6567, val_acc:57.28%\n Epoch 182: iteration 75/76\nEpoch 182 --> loss:0.0909, acc:95.98%, val_loss:1.7820, val_acc:58.25%\n Epoch 183: iteration 75/76\nEpoch 183 --> loss:0.0685, acc:97.07%, val_loss:1.8243, val_acc:58.25%\n Epoch 184: iteration 75/76\nEpoch 184 --> loss:0.0563, acc:97.60%, val_loss:1.9410, val_acc:57.28%\n Epoch 185: iteration 75/76\nEpoch 185 --> loss:0.0403, acc:98.46%, val_loss:1.9902, val_acc:54.37%\n Epoch 186: iteration 75/76\nEpoch 186 --> loss:0.0334, acc:98.46%, val_loss:1.8731, val_acc:56.31%\n Epoch 187: iteration 75/76\nEpoch 187 --> loss:0.0297, acc:98.50%, val_loss:1.8934, val_acc:55.34%\n Epoch 188: iteration 75/76\nEpoch 188 --> loss:0.0286, acc:98.50%, val_loss:1.8870, val_acc:56.31%\n Epoch 189: iteration 75/76\nEpoch 189 --> loss:0.0247, acc:98.54%, val_loss:1.8638, val_acc:62.14%\n Epoch 190: iteration 75/76\nEpoch 190 --> loss:0.0583, acc:97.64%, val_loss:1.8639, val_acc:60.19%\n Epoch 191: iteration 75/76\nEpoch 191 --> loss:0.0526, acc:97.56%, val_loss:1.7843, val_acc:54.37%\n Epoch 192: iteration 75/76\nEpoch 192 --> loss:0.0333, acc:98.46%, val_loss:1.9052, val_acc:56.31%\n Epoch 193: iteration 75/76\nEpoch 193 --> loss:0.0409, acc:98.01%, val_loss:1.6821, val_acc:60.19%\n Epoch 194: iteration 75/76\nEpoch 194 --> loss:0.0360, acc:98.46%, val_loss:1.8379, val_acc:54.37%\n Epoch 195: iteration 75/76\nEpoch 195 --> loss:0.0229, acc:98.62%, val_loss:1.8786, val_acc:57.28%\n Epoch 196: iteration 75/76\nEpoch 196 --> loss:0.0305, acc:98.50%, val_loss:1.8829, val_acc:56.31%\n Epoch 197: iteration 75/76\nEpoch 197 --> loss:0.0301, acc:98.46%, val_loss:1.8695, val_acc:56.31%\n Epoch 198: iteration 75/76\nEpoch 198 --> loss:0.0321, acc:98.37%, val_loss:1.9154, val_acc:56.31%\n Epoch 199: iteration 75/76\nEpoch 199 --> loss:0.0192, acc:98.78%, val_loss:1.8735, val_acc:57.28%\n Epoch 200: iteration 75/76\nEpoch 200 --> loss:0.0200, acc:98.74%, val_loss:1.9008, val_acc:59.22%\n Epoch 201: iteration 75/76\nEpoch 201 --> loss:0.0222, acc:98.58%, val_loss:1.9777, val_acc:61.17%\n Epoch 202: iteration 75/76\nEpoch 202 --> loss:0.0225, acc:98.54%, val_loss:1.9477, val_acc:59.22%\n Epoch 203: iteration 75/76\nEpoch 203 --> loss:0.0182, acc:98.70%, val_loss:1.9750, val_acc:57.28%\n Epoch 204: iteration 75/76\nEpoch 204 --> loss:0.0168, acc:98.74%, val_loss:2.0230, val_acc:58.25%\n Epoch 205: iteration 75/76\nEpoch 205 --> loss:0.0222, acc:98.54%, val_loss:2.1032, val_acc:56.31%\n Epoch 206: iteration 75/76\nEpoch 206 --> loss:0.0328, acc:98.29%, val_loss:1.8528, val_acc:56.31%\n Epoch 207: iteration 75/76\nEpoch 207 --> loss:0.0425, acc:98.01%, val_loss:2.0670, val_acc:55.34%\n Epoch 208: iteration 75/76\nEpoch 208 --> loss:0.0337, acc:98.25%, val_loss:1.9045, val_acc:56.31%\n Epoch 209: iteration 75/76\nEpoch 209 --> loss:0.0298, acc:98.54%, val_loss:2.0145, val_acc:57.28%\n Epoch 210: iteration 75/76\nEpoch 210 --> loss:0.0329, acc:98.37%, val_loss:2.0076, val_acc:59.22%\n Epoch 211: iteration 75/76\nEpoch 211 --> loss:0.0267, acc:98.58%, val_loss:1.8819, val_acc:58.25%\n Epoch 212: iteration 75/76\nEpoch 212 --> loss:0.2715, acc:90.20%, val_loss:1.7688, val_acc:60.19%\n Epoch 213: iteration 75/76\nEpoch 213 --> loss:0.2398, acc:90.65%, val_loss:1.8024, val_acc:54.37%\n Epoch 214: iteration 75/76\nEpoch 214 --> loss:0.1522, acc:93.74%, val_loss:1.6369, val_acc:56.31%\n Epoch 215: iteration 75/76\nEpoch 215 --> loss:0.0754, acc:96.83%, val_loss:1.6331, val_acc:57.28%\n Epoch 216: iteration 75/76\nEpoch 216 --> loss:0.0664, acc:97.28%, val_loss:1.7640, val_acc:55.34%\n Epoch 217: iteration 75/76\nEpoch 217 --> loss:0.0691, acc:97.40%, val_loss:1.7249, val_acc:53.40%\n Epoch 218: iteration 75/76\nEpoch 218 --> loss:0.1923, acc:92.76%, val_loss:2.2574, val_acc:51.46%\n Epoch 219: iteration 75/76\nEpoch 219 --> loss:0.1683, acc:93.46%, val_loss:1.7811, val_acc:56.31%\n Epoch 220: iteration 75/76\nEpoch 220 --> loss:0.1121, acc:95.24%, val_loss:1.8413, val_acc:57.28%\n Epoch 221: iteration 75/76\nEpoch 221 --> loss:0.1512, acc:93.78%, val_loss:1.8954, val_acc:53.40%\n Epoch 222: iteration 75/76\nEpoch 222 --> loss:0.1043, acc:95.85%, val_loss:1.6489, val_acc:58.25%\n Epoch 223: iteration 75/76\nEpoch 223 --> loss:0.0511, acc:97.97%, val_loss:1.5524, val_acc:57.28%\n Epoch 224: iteration 75/76\nEpoch 224 --> loss:0.0269, acc:98.74%, val_loss:1.6647, val_acc:55.34%\n Epoch 225: iteration 75/76\nEpoch 225 --> loss:0.0251, acc:98.62%, val_loss:1.7404, val_acc:54.37%\n Epoch 226: iteration 75/76\nEpoch 226 --> loss:0.0242, acc:98.66%, val_loss:1.7255, val_acc:56.31%\n Epoch 227: iteration 75/76\nEpoch 227 --> loss:0.0305, acc:98.46%, val_loss:1.7437, val_acc:54.37%\n Epoch 228: iteration 75/76\nEpoch 228 --> loss:0.0254, acc:98.58%, val_loss:1.8247, val_acc:54.37%\n Epoch 229: iteration 75/76\nEpoch 229 --> loss:0.0192, acc:98.78%, val_loss:1.8814, val_acc:55.34%\n Epoch 230: iteration 75/76\nEpoch 230 --> loss:0.0155, acc:98.86%, val_loss:1.8085, val_acc:56.31%\n Epoch 231: iteration 75/76\nEpoch 231 --> loss:0.0190, acc:98.54%, val_loss:1.8151, val_acc:57.28%\n Epoch 232: iteration 75/76\nEpoch 232 --> loss:0.0180, acc:98.66%, val_loss:1.7884, val_acc:58.25%\n Epoch 233: iteration 75/76\nEpoch 233 --> loss:0.0254, acc:98.58%, val_loss:1.7522, val_acc:57.28%\n Epoch 234: iteration 75/76\nEpoch 234 --> loss:0.1029, acc:95.49%, val_loss:1.8222, val_acc:53.40%\n Epoch 235: iteration 75/76\nEpoch 235 --> loss:0.1312, acc:94.88%, val_loss:1.7768, val_acc:53.40%\n Epoch 236: iteration 75/76\nEpoch 236 --> loss:0.1590, acc:93.94%, val_loss:1.9105, val_acc:49.51%\n Epoch 237: iteration 75/76\nEpoch 237 --> loss:0.0884, acc:96.42%, val_loss:1.8097, val_acc:57.28%\n Epoch 238: iteration 75/76\nEpoch 238 --> loss:0.0559, acc:97.72%, val_loss:1.8633, val_acc:55.34%\n Epoch 239: iteration 75/76\nEpoch 239 --> loss:0.0344, acc:98.33%, val_loss:1.7737, val_acc:55.34%\n Epoch 240: iteration 75/76\nEpoch 240 --> loss:0.0257, acc:98.74%, val_loss:1.8382, val_acc:54.37%\n Epoch 241: iteration 75/76\nEpoch 241 --> loss:0.0221, acc:98.58%, val_loss:1.9596, val_acc:54.37%\n Epoch 242: iteration 75/76\nEpoch 242 --> loss:0.0231, acc:98.66%, val_loss:1.9086, val_acc:54.37%\n Epoch 243: iteration 75/76\nEpoch 243 --> loss:0.0195, acc:98.78%, val_loss:1.9394, val_acc:56.31%\n Epoch 244: iteration 75/76\nEpoch 244 --> loss:0.0154, acc:98.86%, val_loss:1.8908, val_acc:59.22%\n Epoch 245: iteration 75/76\nEpoch 245 --> loss:0.0147, acc:98.70%, val_loss:1.8880, val_acc:53.40%\n Epoch 246: iteration 75/76\nEpoch 246 --> loss:0.0148, acc:98.78%, val_loss:1.9729, val_acc:53.40%\n Epoch 247: iteration 75/76\nEpoch 247 --> loss:0.0167, acc:98.74%, val_loss:1.9434, val_acc:55.34%\n Epoch 248: iteration 75/76\nEpoch 248 --> loss:0.0126, acc:98.82%, val_loss:1.9737, val_acc:55.34%\n Epoch 249: iteration 75/76\nEpoch 249 --> loss:0.0113, acc:98.78%, val_loss:1.9015, val_acc:57.28%\n Epoch 250: iteration 75/76\nEpoch 250 --> loss:0.0188, acc:98.66%, val_loss:1.9963, val_acc:58.25%\n Epoch 251: iteration 75/76\nEpoch 251 --> loss:0.0132, acc:98.82%, val_loss:1.9934, val_acc:54.37%\n Epoch 252: iteration 75/76\nEpoch 252 --> loss:0.0141, acc:98.78%, val_loss:1.8356, val_acc:57.28%\n Epoch 253: iteration 75/76\nEpoch 253 --> loss:0.0147, acc:98.74%, val_loss:2.0630, val_acc:53.40%\n Epoch 254: iteration 75/76\nEpoch 254 --> loss:0.0119, acc:98.82%, val_loss:1.9575, val_acc:55.34%\n Epoch 255: iteration 75/76\nEpoch 255 --> loss:0.0113, acc:98.74%, val_loss:1.9088, val_acc:55.34%\n Epoch 256: iteration 75/76\nEpoch 256 --> loss:0.0143, acc:98.74%, val_loss:1.9555, val_acc:55.34%\n Epoch 257: iteration 75/76\nEpoch 257 --> loss:0.0101, acc:98.78%, val_loss:2.0153, val_acc:56.31%\n Epoch 258: iteration 75/76\nEpoch 258 --> loss:0.0128, acc:98.74%, val_loss:1.8533, val_acc:54.37%\n Epoch 259: iteration 75/76\nEpoch 259 --> loss:0.0123, acc:98.78%, val_loss:1.9840, val_acc:55.34%\n Epoch 260: iteration 75/76\nEpoch 260 --> loss:0.0134, acc:98.74%, val_loss:2.0241, val_acc:56.31%\n Epoch 261: iteration 75/76\nEpoch 261 --> loss:0.0129, acc:98.82%, val_loss:1.9260, val_acc:52.43%\n Epoch 262: iteration 75/76\nEpoch 262 --> loss:0.0116, acc:98.78%, val_loss:1.9508, val_acc:52.43%\n Epoch 263: iteration 75/76\nEpoch 263 --> loss:0.0100, acc:98.82%, val_loss:1.9311, val_acc:54.37%\n Epoch 264: iteration 75/76\nEpoch 264 --> loss:0.0095, acc:98.78%, val_loss:1.8957, val_acc:51.46%\n Epoch 265: iteration 75/76\nEpoch 265 --> loss:0.0099, acc:98.82%, val_loss:1.9924, val_acc:52.43%\n Epoch 266: iteration 75/76\nEpoch 266 --> loss:0.0102, acc:98.78%, val_loss:1.9150, val_acc:55.34%\n Epoch 267: iteration 75/76\nEpoch 267 --> loss:0.2711, acc:90.00%, val_loss:1.9728, val_acc:50.49%\n Epoch 268: iteration 75/76\nEpoch 268 --> loss:0.2362, acc:90.37%, val_loss:1.9724, val_acc:54.37%\n Epoch 269: iteration 75/76\nEpoch 269 --> loss:0.1753, acc:93.50%, val_loss:1.9311, val_acc:50.49%\n Epoch 270: iteration 75/76\nEpoch 270 --> loss:0.0826, acc:96.87%, val_loss:1.6255, val_acc:54.37%\n Epoch 271: iteration 75/76\nEpoch 271 --> loss:0.1510, acc:93.98%, val_loss:1.9921, val_acc:55.34%\n Epoch 272: iteration 75/76\nEpoch 272 --> loss:0.1177, acc:95.16%, val_loss:1.9555, val_acc:52.43%\n Epoch 273: iteration 75/76\nEpoch 273 --> loss:0.0465, acc:98.01%, val_loss:1.7164, val_acc:53.40%\n Epoch 274: iteration 75/76\nEpoch 274 --> loss:0.0351, acc:98.50%, val_loss:1.7363, val_acc:48.54%\n Epoch 275: iteration 75/76\nEpoch 275 --> loss:0.0240, acc:98.62%, val_loss:1.8289, val_acc:52.43%\n Epoch 276: iteration 75/76\nEpoch 276 --> loss:0.0222, acc:98.70%, val_loss:1.8875, val_acc:51.46%\n Epoch 277: iteration 75/76\nEpoch 277 --> loss:0.0241, acc:98.74%, val_loss:1.8264, val_acc:56.31%\n Epoch 278: iteration 60/76","output_type":"stream"},{"traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)","Cell \u001b[0;32mIn[39], line 30\u001b[0m\n\u001b[1;32m     28\u001b[0m X_tensor \u001b[38;5;241m=\u001b[39m torch\u001b[38;5;241m.\u001b[39mtensor(X,device\u001b[38;5;241m=\u001b[39mdevice)\u001b[38;5;241m.\u001b[39mfloat()\n\u001b[1;32m     29\u001b[0m Y_tensor \u001b[38;5;241m=\u001b[39m torch\u001b[38;5;241m.\u001b[39mtensor(Y, dtype\u001b[38;5;241m=\u001b[39mtorch\u001b[38;5;241m.\u001b[39mlong,device\u001b[38;5;241m=\u001b[39mdevice)\n\u001b[0;32m---> 30\u001b[0m loss, acc \u001b[38;5;241m=\u001b[39m \u001b[43mtrain_step\u001b[49m\u001b[43m(\u001b[49m\u001b[43mX_tensor\u001b[49m\u001b[43m,\u001b[49m\u001b[43mY_tensor\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m     31\u001b[0m epoch_acc \u001b[38;5;241m+\u001b[39m\u001b[38;5;241m=\u001b[39m acc\u001b[38;5;241m*\u001b[39mactual_batch_size\u001b[38;5;241m/\u001b[39mDATASET_SIZE\n\u001b[1;32m     32\u001b[0m epoch_loss \u001b[38;5;241m+\u001b[39m\u001b[38;5;241m=\u001b[39m loss\u001b[38;5;241m*\u001b[39mactual_batch_size\u001b[38;5;241m/\u001b[39mDATASET_SIZE\n","Cell \u001b[0;32mIn[28], line 12\u001b[0m, in \u001b[0;36mmake_train_step.<locals>.train_step\u001b[0;34m(X, Y)\u001b[0m\n\u001b[1;32m     10\u001b[0m loss \u001b[38;5;241m=\u001b[39m loss_fnc(output_logits, Y)\n\u001b[1;32m     11\u001b[0m \u001b[38;5;66;03m# compute gradients\u001b[39;00m\n\u001b[0;32m---> 12\u001b[0m \u001b[43mloss\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mbackward\u001b[49m\u001b[43m(\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m     13\u001b[0m \u001b[38;5;66;03m# update parameters and zero gradients\u001b[39;00m\n\u001b[1;32m     14\u001b[0m optimizer\u001b[38;5;241m.\u001b[39mstep()\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/torch/_tensor.py:492\u001b[0m, in \u001b[0;36mTensor.backward\u001b[0;34m(self, gradient, retain_graph, create_graph, inputs)\u001b[0m\n\u001b[1;32m    482\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m has_torch_function_unary(\u001b[38;5;28mself\u001b[39m):\n\u001b[1;32m    483\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m handle_torch_function(\n\u001b[1;32m    484\u001b[0m         Tensor\u001b[38;5;241m.\u001b[39mbackward,\n\u001b[1;32m    485\u001b[0m         (\u001b[38;5;28mself\u001b[39m,),\n\u001b[0;32m   (...)\u001b[0m\n\u001b[1;32m    490\u001b[0m         inputs\u001b[38;5;241m=\u001b[39minputs,\n\u001b[1;32m    491\u001b[0m     )\n\u001b[0;32m--> 492\u001b[0m \u001b[43mtorch\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mautograd\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mbackward\u001b[49m\u001b[43m(\u001b[49m\n\u001b[1;32m    493\u001b[0m \u001b[43m    \u001b[49m\u001b[38;5;28;43mself\u001b[39;49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mgradient\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mretain_graph\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mcreate_graph\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43minputs\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43minputs\u001b[49m\n\u001b[1;32m    494\u001b[0m \u001b[43m\u001b[49m\u001b[43m)\u001b[49m\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/torch/autograd/__init__.py:251\u001b[0m, in \u001b[0;36mbackward\u001b[0;34m(tensors, grad_tensors, retain_graph, create_graph, grad_variables, inputs)\u001b[0m\n\u001b[1;32m    246\u001b[0m     retain_graph \u001b[38;5;241m=\u001b[39m create_graph\n\u001b[1;32m    248\u001b[0m \u001b[38;5;66;03m# The reason we repeat the same comment below is that\u001b[39;00m\n\u001b[1;32m    249\u001b[0m \u001b[38;5;66;03m# some Python versions print out the first line of a multi-line function\u001b[39;00m\n\u001b[1;32m    250\u001b[0m \u001b[38;5;66;03m# calls in the traceback and some print out the last line\u001b[39;00m\n\u001b[0;32m--> 251\u001b[0m \u001b[43mVariable\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_execution_engine\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mrun_backward\u001b[49m\u001b[43m(\u001b[49m\u001b[43m  \u001b[49m\u001b[38;5;66;43;03m# Calls into the C++ engine to run the backward pass\u001b[39;49;00m\n\u001b[1;32m    252\u001b[0m \u001b[43m    \u001b[49m\u001b[43mtensors\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    253\u001b[0m \u001b[43m    \u001b[49m\u001b[43mgrad_tensors_\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    254\u001b[0m \u001b[43m    \u001b[49m\u001b[43mretain_graph\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    255\u001b[0m \u001b[43m    \u001b[49m\u001b[43mcreate_graph\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    256\u001b[0m \u001b[43m    \u001b[49m\u001b[43minputs\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    257\u001b[0m \u001b[43m    \u001b[49m\u001b[43mallow_unreachable\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;28;43;01mTrue\u001b[39;49;00m\u001b[43m,\u001b[49m\n\u001b[1;32m    258\u001b[0m \u001b[43m    \u001b[49m\u001b[43maccumulate_grad\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;28;43;01mTrue\u001b[39;49;00m\u001b[43m,\u001b[49m\n\u001b[1;32m    259\u001b[0m \u001b[43m\u001b[49m\u001b[43m)\u001b[49m\n","\u001b[0;31mKeyboardInterrupt\u001b[0m: "],"ename":"KeyboardInterrupt","evalue":"","output_type":"error"}]},{"cell_type":"markdown","source":"# Save model","metadata":{"id":"xwysi2poWmvf"}},{"cell_type":"code","source":"SAVE_PATH = os.path.join(os.getcwd(),'models')\nos.makedirs('models',exist_ok=True)\ntorch.save(model.state_dict(),os.path.join(SAVE_PATH,'cnn_lstm_parallel_model.pt'))\nprint('Model is saved to {}'.format(os.path.join(SAVE_PATH,'cnn_lstm_parallel_model.pt')))","metadata":{"id":"KbJcOvkUWmvg","execution":{"iopub.status.busy":"2024-07-02T14:19:58.253839Z","iopub.execute_input":"2024-07-02T14:19:58.254230Z","iopub.status.idle":"2024-07-02T14:19:58.267251Z","shell.execute_reply.started":"2024-07-02T14:19:58.254203Z","shell.execute_reply":"2024-07-02T14:19:58.266311Z"},"trusted":true},"execution_count":40,"outputs":[{"name":"stdout","text":"Model is saved to /kaggle/working/models/cnn_lstm_parallel_model.pt\n","output_type":"stream"}]},{"cell_type":"markdown","source":"# Load model","metadata":{"id":"ltVwqKGpWmvg"}},{"cell_type":"code","source":"LOAD_PATH = os.path.join(os.getcwd(),'models')\nmodel = ParallelModel(len(EMOTIONS))\nmodel.load_state_dict(torch.load(os.path.join(LOAD_PATH,'cnn_lstm_parallel_model.pt')))\nprint('Model is loaded from {}'.format(os.path.join(LOAD_PATH,'cnn_lstm_parallel_model.pt')))","metadata":{"id":"EKXnTrlZWmvg","execution":{"iopub.status.busy":"2024-07-02T14:20:03.938932Z","iopub.execute_input":"2024-07-02T14:20:03.939311Z","iopub.status.idle":"2024-07-02T14:20:03.961278Z","shell.execute_reply.started":"2024-07-02T14:20:03.939280Z","shell.execute_reply":"2024-07-02T14:20:03.960409Z"},"trusted":true},"execution_count":41,"outputs":[{"name":"stdout","text":"Model is loaded from /kaggle/working/models/cnn_lstm_parallel_model.pt\n","output_type":"stream"}]},{"cell_type":"markdown","source":"# Test","metadata":{"id":"Y-OAi2f0Wmvg"}},{"cell_type":"code","source":"X_test_tensor = torch.tensor(X_test,device=device).float()\nY_test_tensor = torch.tensor(Y_test,dtype=torch.long,device=device)\ntest_loss, test_acc, predictions = validate(X_test_tensor,Y_test_tensor)\nprint(f'Test loss is {test_loss:.3f}')\nprint(f'Test accuracy is {test_acc:.2f}%')","metadata":{"id":"AXIYDQajWmvh","execution":{"iopub.status.busy":"2024-07-02T14:20:05.052137Z","iopub.execute_input":"2024-07-02T14:20:05.052469Z","iopub.status.idle":"2024-07-02T14:20:05.123531Z","shell.execute_reply.started":"2024-07-02T14:20:05.052445Z","shell.execute_reply":"2024-07-02T14:20:05.122603Z"},"trusted":true},"execution_count":42,"outputs":[{"name":"stdout","text":"Test loss is 2.470\nTest accuracy is 51.43%\n","output_type":"stream"}]},{"cell_type":"markdown","source":"confusion matrix","metadata":{"id":"UoAen3PtWmvh"}},{"cell_type":"markdown","source":"# Plot loss","metadata":{"id":"3KfDrZcCWmvi"}},{"cell_type":"code","source":"plt.plot(losses,'b')\nplt.plot(val_losses,'r')\nplt.legend(['train loss','val loss'])","metadata":{"id":"m2EuoqsAWmvj","execution":{"iopub.status.busy":"2024-07-02T14:20:49.297557Z","iopub.execute_input":"2024-07-02T14:20:49.297930Z","iopub.status.idle":"2024-07-02T14:20:49.505515Z","shell.execute_reply.started":"2024-07-02T14:20:49.297902Z","shell.execute_reply":"2024-07-02T14:20:49.504675Z"},"trusted":true},"execution_count":45,"outputs":[{"execution_count":45,"output_type":"execute_result","data":{"text/plain":"<matplotlib.legend.Legend at 0x7b28a15bc8b0>"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<Figure size 640x480 with 1 Axes>","image/png":""},"metadata":{}}]},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]}]}